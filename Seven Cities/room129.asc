

function hHotspot1_AnyClick()
{
    
    int x = 300;
    int y =  95;
    eObjectType objType = eHeavy;
  
    // TALK TO
    if (Verbs.UsedAction(eGA_TalkTo)) {
        player.Say("Talk to");
    }
    // LOOK AT
    else if(Verbs.UsedAction(eGA_LookAt)) {
        player.Say("Look at - unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here

        Unhandled_FaceLocation(x, y, objType); //I could simply use Verbs.Unhandled();
    }
    // OPEN
    else if(Verbs.UsedAction(eGA_Open)) {
        player.Say("Open - unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here

        Unhandled_FaceLocation(x, y, objType); //I could simply use Verbs.Unhandled();
    }  
    // CLOSE
    else if(Verbs.UsedAction(eGA_Close)) {
        player.Say("Close - unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here

        Unhandled_FaceLocation(x, y, objType); //I could simply use Verbs.Unhandled();
    }
    // USE
    else if(Verbs.UsedAction(eGA_Use)) {
        player.Say("Use - unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here

        Unhandled_FaceLocation(x, y, objType); //I could simply use Verbs.Unhandled();
    }
    // Push
    else if(Verbs.UsedAction(eGA_Push)) {
        player.Say("Push - unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here

        Unhandled_FaceLocation(x, y, objType); //I could simply use Verbs.Unhandled();
    }
    // Pull
    else if(Verbs.UsedAction(eGA_Pull)) {
        player.Say("Pull - unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here

        Unhandled_FaceLocation(x, y, objType); //I could simply use Verbs.Unhandled();
    } 
    // PICKUP
    else if(Verbs.UsedAction(eGA_PickUp)) {
        player.Say("Pick up - unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here

        Unhandled_FaceLocation(x, y, objType); //I could simply use Verbs.Unhandled();
    }
    // GIVE TO
    else if (Verbs.UsedAction(eGA_GiveTo)) {
        //THERE'S NO "GIVE TO" ON A HOTSPOT!!
        /*
        player.Say("Give to - iCup or unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here
        if (ItemGiven == iPruningShears) {  //IMPORTANT : you may use "ItemGiven" only if you've done an "import" (see import at the top of this file)
            player.Say("I'm using the shears.");
        }
        else {
            player.Say("Give to : unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here
            Verbs.Unhandled();
        }
        */
    }
    //USE INV
    else if(Verbs.UsedAction(eGA_UseInv)) {
        player.Say("Use inv - iPruningShears or unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here
        if (player.ActiveInventory == iPruningShears) { 
            player.Say("I'm using the shears.");
        }
        else {
            player.Say("unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here
    
            Unhandled_FaceLocation(x, y, objType); //I could simply use Verbs.Unhandled();
        }
    }
    else { 

        Unhandled_FaceLocation(x, y, objType); //I could simply use Verbs.Unhandled();
    }
}

function room_AfterFadeIn()
{
    //gTestInteractions.Visible = true;
    gTestInteractions2.Visible = true;
    
    //Display("%d", btnVerb1.Graphic);
}

function room_Leave()
{
    //gTestInteractions.Visible = false;
    gTestInteractions2.Visible = false;
}

function room_FirstLoad()
{

  #ifdef TESTING
    if (CheckPoints.IsJumping()) { //we're in debug and we arrived in this room using the "jump to checkpoint" button
      CheckPoints.JumpDone();
    }
    Mouse.Mode = eModeWalkto;
    PlayerUI.EnableAndShow(); 
    
  #endif

}



function oTestObject_AnyClick()
{
    // TALK TO
    if (Verbs.UsedAction(eGA_TalkTo)) {
        player.Say("Talk to");
    }
    // LOOK AT
    else if(Verbs.UsedAction(eGA_LookAt)) {
        player.Say("Look at - unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here
        Verbs.Unhandled();
    }
    // OPEN
    else if(Verbs.UsedAction(eGA_Open)) {
        player.Say("Open - unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here
        Verbs.Unhandled();
    }  
    // CLOSE
    else if(Verbs.UsedAction(eGA_Close)) {
        player.Say("Close - unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here
        Verbs.Unhandled();
    }
    // USE
    else if(Verbs.UsedAction(eGA_Use)) {
        player.Say("Use - unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here
        Verbs.Unhandled();
    }
    // Push
    else if(Verbs.UsedAction(eGA_Push)) {
        player.Say("Push - unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here
        Verbs.Unhandled();
    }
    // Pull
    else if(Verbs.UsedAction(eGA_Pull)) {
        player.Say("Pull - unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here
        Verbs.Unhandled();
    } 
    // PICKUP
    else if(Verbs.UsedAction(eGA_PickUp)) {
        player.Say("Pick up - unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here
        Verbs.Unhandled();
    }
    // GIVE TO
    else if (Verbs.UsedAction(eGA_GiveTo)) {
        player.Say("Give to - iPruningShears or unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here
        if (Verbs.GetItemGiven() == iPruningShears) {  
            player.Say("I'm using the shears.");
        }
        else {
            player.Say("Give to : unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here
            Verbs.Unhandled();
        }
    }
    //USE INV
    else if(Verbs.UsedAction(eGA_UseInv)) {
        player.Say("Use inv - iPruningShears or unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here
        if (player.ActiveInventory == iPruningShears) { 
            player.Say("I'm using the shears.");
        }
        else {
            player.Say("unhandled"); //ONLY IF NEEDED: I make the player do whatever I want here
            Verbs.Unhandled();
        }
    }
    else Verbs.Unhandled();
}
