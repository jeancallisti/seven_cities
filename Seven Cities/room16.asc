
//room 17 is an arbitrary dumping room (actually, it's the chalkboard room)
int arbitraryDumpingRoom = eRoom_02_01_ChalkBoardFace ;

//removes all characters and sprites related to the students intrusion
function hideIntrusion()
{
  
  cNarr.ChangeRoom(arbitraryDumpingRoom);
  cStudentBiff.ChangeRoom(arbitraryDumpingRoom);
  cStudentPink.ChangeRoom(arbitraryDumpingRoom);
  cStudentFat.ChangeRoom(arbitraryDumpingRoom);
  cStudentTie.ChangeRoom(arbitraryDumpingRoom);
  cStudentRedhead.ChangeRoom(arbitraryDumpingRoom);
  
  oStudentsBackground.Visible = false;
  
  region[2].Enabled = false; //we disable the region that triggers indy refusing to go out
}

//plays the intrusion animation and brings all related characters and sprites intot his room
function doIntrusion() {
  hideIntrusion(); //DEBUG (we reset the animation)
  
  //we use the "pink student" character to play the students intrusion animation
  cStudentPink.ChangeRoom(eRoom_02_02_IndyClassRoom_New, 148, 110); //this animation is large: we position the character accordingly
  cStudentPink.LockView(INTRUSION);
  Wait(1); //freeze on frame one
  
  cNarr.ChangeRoom(eRoom_02_02_IndyClassRoom_New, 140, 40); //bring the narrator into this room
  cNarr.SpeechColor=12;
  cNarr.Say("Doctor Jones!"); //we use the narrator to make the students shout wherever we want on screen (otherwise the game tries to use the students talking view)
  cNarr.ChangeRoom(arbitraryDumpingRoom);//we remove it from this room
  
  player.Say("uh oh...");
  player.Walk(player.x+25, player.y+15, eBlock);
  player.FaceDirection(eLeft);
  
  //animate the intrusion
  cStudentPink.Animate(0, 0, eOnce, eBlock, eForwards);
  cStudentPink.UnlockView();
  oStudentsBackground.Visible = true;//that's the image with a few secondary students, used in the background of important students
  
    //back to normal
  cStudentPink.ChangeView(PINK_WALK);
  cStudentPink.x=155;
  cStudentPink.y=95;
  cStudentPink.SetIdleView(PINK_IDLE, 0);

  //bring in other students
  cStudentBiff.ChangeRoom(16,  140,  56);
  cStudentBiff.SetIdleView(BIFF2_IDLE, 0);
  cStudentFat.ChangeRoom(16, 128, 65);
  cStudentFat.SetIdleView(FAT_IDLE, 0);  
  cStudentTie.ChangeRoom(16, 139, 58);
  cStudentTie.SetIdleView(TIE_IDLE, 0);  
  cStudentRedhead.ChangeRoom(16, 148, 57);
  cStudentRedhead.SetIdleView(REDHEAD_IDLE, 0);  
  
  cStudentPink.Say("We need to talk to you!");
  WAIT_10
  
  region[2].Enabled=true; //we enable the region that triggers indy refusing to go out
  

  Wait(1);
  
  
}


//animates the hands and heads of the students in the foreground
function animateAllStudents() {
  cStudent8.SetIdleView(STUDENT8_IDLE1, 0); 
  cStudent9.SetIdleView(STUDENT9_IDLE1, 0); 
  cStudent10.SetIdleView(STUDENT10_IDLE, 0); 
/*
  cStudent8.LockView(STUDENT8_IDLE); 
  cStudent8.Animate(0, 2, eRepeat, eNoBlock);
  cStudent9.LockView(STUDENT9_IDLE);
  cStudent9.Animate(0, 2, eRepeat, eNoBlock);
  */
}

function room_BeforeFadeIn()
{
  Doors7COG.OnEnterRoom(); //this function must be called in EVERY ROOM that contains a door
  aMusic1.Play();
  animateAllStudents();  
  hideIntrusion();
}

function room_FirstLoad()
{  
  PlayerUI.EnableAndShow(); 
  
  #ifdef TESTING
  if (CheckPoints.IsJumping()) { //we're in debug and we arrived in this room using the "jump to checkpoint" button
     
     //never forget to tell the engine we're done jumping. we do it immediately in case a cutscene would contain a 'ChangeRoom', thus calling 'isJumping' again
    CheckPoints.JumpDone(); 
    
    if (CheckPoints.RequestedCheckpoint(eRoom_02_02_IndyClassRoom_New, eChckpnt_03_IndysClassroom_chalkboardCutscene)) {
    } else if (CheckPoints.RequestedCheckpoint(eRoom_02_02_IndyClassRoom_New, eChckpnt_04_IndysClassroom_studentsPuzzle)) {
    } else if (CheckPoints.RequestedCheckpoint(eRoom_02_02_IndyClassRoom_New, eChckpnt_05_IndysClassroom_studentsPuzzle2)) {
    } else if (CheckPoints.RequestedCheckpoint(eRoom_02_02_IndyClassRoom_New)) {
      player.Say("Hey yo, Mr. White!");
      player.Say("Imma make some badass pixel-art.");
      player.Say("Let's start cooking, BITCH.");  
    }
  }
  #endif
  

  /*
  //if we arrive from the board close-up, the player might be cIndy_closeup_suit
  if (player == cIndy_closeup_suit)
  {
    player.SetAsPlayer();
    cIndy_closeup_suit.Transparency=100; Wait(1);
    cIndy_closeup_suit.ChangeRoom(17);
    Wait(1);
  }
  */


  //DEBUG
  CharactersLogic.setIndyView_suit();
  //END OF DEBUG
  
  //EndCutscene(); //DEBUG TEST
  //player.x=239;
  //player.y=101;
  
}

// Hotspots

function region1_Standing()
{
  player.ChangeRoom_ThroughDoor(oDoor1);
}

//the region that forbids Indy from sneaking out of the room while the students are still angry
function region2_WalksOnto()
{
  if (!DialogsLogic.GetVarBool("eDialog_StudentsPuzzleFullyResolved") && Doors7COG.IsOpen(oDoor1)) {
    //make the students complain fast
    CharactersLogic.Students_SpeakFast2( "Professor!", "Where are you going?", "Not through the window again!", "We need an answer!");
    
    //we temporarily make Indy walk faster
    int speedX = player.WalkSpeedX; //we save the original speed
    int speedY = player.WalkSpeedY;  
    player.StopMoving();
    player.SetWalkSpeed(player.WalkSpeedX*2, player.WalkSpeedY*2);
    player.Walk(274,  135,  eBlock);
    player.StopMoving();
    player.SetWalkSpeed(speedX, speedY);//we restore the original speed
    player.FaceDirection(eLeft);
    player.Say("Don't be ridiculous. Of course I'm not leaving.");
  }
}

function region3_WalksOnto()
{
  if (!DialogsLogic.GetVarBool("eDialog_StudentsPuzzleFullyResolved") && Doors7COG.IsOpen(oDoor1)) {
    player.Say("I can't walk out, they're blocking the door. And they seem pretty decided.");
    player.Walk(player.x+20,  player.y+5);
  }  
}

function oDoor1_AnyClick()
{  
  Action usedAction = Verbs.GetUsedAction();
  if (DialogsLogic.GetVarBool("eDialog_StudentsPuzzleFullyResolved")) {  
    //the angry students have left
    Doors7COG.DefaultReaction_WalkFirst(oDoor1, usedAction);
    return;
  }
  
  //the students are still angry
  switch(usedAction){
    case eGA_Close: 
      if(Doors7COG.IsOpen(oDoor1)) {
        player.Walk(160, 96);
        cStudentPink.Say("Professor, are you trying to slam your door on us?");
        player.FaceDirection(eLeft);
        player.Say("Who? Me? Of course not.");
      }
      break;
    case eGA_Open: 
      if (!Doors7COG.IsOpen(oDoor1)) {
        Doors7COG.DefaultReaction_WalkFirst(oDoor1, usedAction);
        doIntrusion();
      }
      break;
    case eGA_WalkTo:
     if (Doors7COG.IsOpen(oDoor1)) {
        player.Say("I can't walk out, they're blocking the door. And they seem pretty decided.");
      }
    default:
      Doors7COG.DefaultReaction_WalkFirst(oDoor1, usedAction);
      break;
  }
}

/////////////////////////////////////


int xCompassWalk=244;
int yCompassWalk=108;

bool seenCompass = false;

function oCompass_LookAt()
{  
  player.Say("Someone left that artifact on my desk before the class.");
  player.Say("Probably Irene, my secretary.");
  player.Say("I suppose a colleague of mine thought it would be of interest for me.");
  seenCompass = true;
}

function oCompass_AnyClick()
{
  player.FaceLocation(oCompass.X,  oCompass.Y,  eBlock);
  Action usedAction = Verbs.GetUsedAction();
  switch(usedAction){
    case eGA_LookAt: oCompass_LookAt(); break;
    case eGA_PickUp: 
      player.Walk(xCompassWalk,  yCompassWalk,  eBlock);
      player.FaceLocation(oCompass.X,  oCompass.Y,  eBlock);
      if (!seenCompass)
        oCompass_LookAt();
      player.Say("I'll just take it.");
      oCompass.Visible = false;
      player.AddInventory(iCompass);
      break;
    default:
      Verbs.Unhandled();
      break;
  }
}

bool tagTaken = false;
bool deskOpen = false;

function hDesk_AnyClick()
{
  player.FaceLocation(190,  115,  eBlock);
  Action usedAction = Verbs.GetUsedAction();
  switch(usedAction){
    case eGA_GiveTo: player.Say("I can't give to that."); break;
    case eGA_Pull: player.Say("I don't want to pull that."); break;
    case eGA_Push: player.Say("As much fun as it would be to push the desk and give myself a back spasm, I think I'll pass."); break;
    case eGA_Close: 
      if (deskOpen) {
        player.Say("I have more urgent matters to attend to, right now.");
      } else {
        player.Walk(hDesk.WalkToX,  hDesk.WalkToY,  eBlock);
        player.FaceAndSay(eLeft,  "It's already closed.");      
      }
      break;
    case eGA_LookAt: 
      if (!tagTaken) {
        player.Say("It's flat, and it has drawers. It's a desk.");
      }else {
        player.Walk(hDesk.WalkToX,  hDesk.WalkToY,  eBlock);
        player.Say("I don't think there is anything else in it.");   
      }
      break;
    case eGA_Open: 
      if (deskOpen) {
        player.Say("It's already open.");
      } else {
        player.Walk(hDesk.WalkToX,  hDesk.WalkToY,  eBlock);
        player.FaceAndSay(eLeft,  "I don't think there is anything in that drawer that can help.");
        WAIT_40
        player.Say("Wait! There is a small tag. I don't recall putting it in here.");
        player.Say("I'll take it.");
        player.AddInventory(iCompassNote);
        deskOpen = true;
        tagTaken = true;
      }
      break;
    default:
      Verbs.Unhandled(eHeavy);
      break;
  }  
}