
bool debugPause; //boolean flag that's true when the "debug pause" is on (it's stronger than a regular pause)

///////////////////////////////////
//
//        CHECKPOINTS/DEBUG POPUP
//
///////////////////////////////////



bool NoMusic_checked = true;

static void CheckpointsGui::Show()
{
  gCheckpoints.Visible = true;
  EnableInterface();    //Safety
  mouse.Visible = true; //Safety
  
  if (NoMusic_checked)
    ButtonNoMusic.NormalGraphic = 360;
  else 
    ButtonNoMusic.NormalGraphic = 359;
    
  CheckPoints.PopulateControls(ListBoxCategories,  ListBoxCheckpoints);
}

static void CheckpointsGui::Hide()
{
  gCheckpoints.Visible = false;
}

static void CheckpointsGui::OnButtonClick()
{
  int checkpointIndex = ListBoxCheckpoints.SelectedIndex; //the listbox items indices are zero-based
  CheckpointsGui.Hide();
  
  if (NoMusic_checked) {
    //Display("No music");
    System.Volume = 0;
  }
  
  int categoryIndex = ListBoxCategories.SelectedIndex;
  CheckPoints.JumpTo(categoryIndex, checkpointIndex);

}

static void CheckpointsGui::OnNoMusicClick() {
  if (NoMusic_checked) {
    NoMusic_checked = false;
    ButtonNoMusic.NormalGraphic = 359;
  } else {
    NoMusic_checked = true;
    ButtonNoMusic.NormalGraphic = 360;
  }  
}

int last_gCheckpoints_click = 0;
int last_gCheckpoints_checked = 0;

function ScrollListBox(ListBox* listBox, MouseButton button) {
  if (button == eMouseWheelNorth) {
      listBox.ScrollUp();
      listBox.ScrollUp();
      listBox.ScrollUp();
  }
  else if (button == eMouseWheelSouth) {
      listBox.ScrollDown();
      listBox.ScrollDown();
      listBox.ScrollDown();
  }   
}


static void CheckpointsGui::OnMouseClick(MouseButton button) {
  if(gCheckpoints.Visible)
  {            
    GUIControl* overGuiControl = GUIControl.GetAtScreenXY(mouse.x, mouse.y);
    
    //== LEFT MOUSE BUTTON ==
    if (button == eMouseLeft)
    {
      //CHECKPOINTS LIST EVENTS
      if(overGuiControl == ListBoxCheckpoints) {    
        //Display("%d", ListBoxCheckpoints.SelectedIndex);
        DateTime *dt = DateTime.Now; 
        //== DOUBLE CLICK
        if((dt.RawTime - last_gCheckpoints_click) < 2 && last_gCheckpoints_checked == ListBoxCheckpoints.SelectedIndex) {
          //We simulate the click on the "directly go there" button
          CheckpointsGui.OnButtonClick();
        }
        last_gCheckpoints_click = dt.RawTime;
        last_gCheckpoints_checked = ListBoxCheckpoints.SelectedIndex;
      }
      //CATEGORIES LIST EVENTS
      else if(overGuiControl == ListBoxCategories) {             
        //== SIMPLE CLICK ==
        //The category has changed => refresh the checkpoints listbox
        int categoryIndex = ListBoxCategories.SelectedIndex;
        CheckPoints.PopulateCheckpoints(ListBoxCheckpoints,  categoryIndex);
      }        
    //== SCROLL MOUSE ==
    } else if (button == eMouseWheelNorth || button == eMouseWheelSouth) {
      //CHECKPOINTS LIST EVENTS
      if(overGuiControl == ListBoxCheckpoints) {
        // == MOUSE WHEEL ==
        ScrollListBox(ListBoxCheckpoints, button);
      }
      //CATEGORIES LIST EVENTS
      else if(overGuiControl == ListBoxCategories) { 
        // == MOUSE WHEEL ==
        ScrollListBox(ListBoxCategories, button);
      }
    }
  }
}
     
///////////////////////////////////
//
//        MISCELLANEOUS UI
//
///////////////////////////////////

  
static void GUIlogic::InitializeGUI() {

  // called when the game starts, before the first room is loaded
  //CustomInventory.Init();
  
  /* OLD
  gDialog.Visible = false;
  gDialog2.Visible = false;
  gControlmenu.Visible = false;
  gSave2.Visible = false;
  gControlmenu.Centre();
  gStatusline.Visible = false;
  gIconbar.Visible = false;
    */
    
  gTitleMenu.Visible = false;
  //gQuitToTitle.Visible = false;
  
  //RealPause.BindGui(gPauseBar); //OLD
  RealPause.BindGui(gPause);
  
}

/*
void Highlight_PickUp() {
  Display("Highlight_PickUp not implemented"); //BECAUSE WE'RE LAZY. THAT'S WHY
}

void Highlight_Open() {
    btnPickUp.NormalGraphic = 150;
    btnOpen.NormalGraphic = 147;
    btnTalkTo.NormalGraphic = 144;
    btnLookAt.NormalGraphic = 140;
}

void Highlight_LookAt() {
    btnPickUp.NormalGraphic = 150;
    btnOpen.NormalGraphic = 146;
    btnTalkTo.NormalGraphic = 144;
    btnLookAt.NormalGraphic = 141;

}

void Highlight_TalkTo() {
    btnPickUp.NormalGraphic = 150;
    btnOpen.NormalGraphic = 146;
    btnTalkTo.NormalGraphic = 145;
    btnLookAt.NormalGraphic = 140;  
}

void Highlight_Nothing() {
    btnPickUp.NormalGraphic = 150;
    btnOpen.NormalGraphic = 146;
    btnTalkTo.NormalGraphic = 144;
    btnLookAt.NormalGraphic = 140;  
}

static void GUIlogic::HighlightActionButton(CursorMode cursor ) {
  if (cursor == eModeClose) {
    Display("Not implemented");
  } else if (cursor == eModeOpen) {
    Highlight_Open();
   } else if (cursor == eModeLookat) {
    Highlight_LookAt();
  } else if (cursor == eModePickup) {
    Highlight_PickUp();
  } else if (cursor == eModeTalkto) {
    Highlight_TalkTo();
  } else if (cursor == eModeWalkto) { //'walk to' isn't worth highlighting anything
    Highlight_Nothing();
  }

}


static void GUIlogic::UpdateStatusBar() {
    

    if (mouse.Mode == eModeWalkto) Status.Text = "Walk to @OVERHOTSPOT@";
    else if (mouse.Mode == eModeLookat) Status.Text = "Look at @OVERHOTSPOT@";
    else if (mouse.Mode == eModeInteract) Status.Text = "Use @OVERHOTSPOT@";
    else if (mouse.Mode == eModeTalkto) Status.Text = "Talk to @OVERHOTSPOT@";
    else if (mouse.Mode == eModeOpen) Status.Text = "Open @OVERHOTSPOT@";
    else if (mouse.Mode == eModeClose) Status.Text = "Close @OVERHOTSPOT@";
    else if (mouse.Mode == eModePush) Status.Text = "Push @OVERHOTSPOT@";
    else if (mouse.Mode == eModePull) Status.Text = "Pull @OVERHOTSPOT@";
    else if (mouse.Mode == eModePickup) Status.Text = "Pick up @OVERHOTSPOT@";
    else if (mouse.Mode == eModeGive) {
      int giveItem = game.inv_activated;
      if (giveItem < 1) { // no specified item
        //ResetGiveItem(); //at the moment there is no give item
        Status.Text = "Give @OVERHOTSPOT@";
      } else {
        //SetGiveItem(giveItem);
        Status.Text = String.Format("Give %s to @OVERHOTSPOT@", inventory[giveItem].Name);
      }
    }
    else if (mouse.Mode == eModeUseinv) {
      if (player.ActiveInventory == null) { // No inventory...
        Status.Text = "Use @OVERHOTSPOT@";
      } else {
        Status.Text = String.Format("Use %s with @OVERHOTSPOT@", inventory[player.ActiveInventory.ID].Name); 
      }
    }

}


//disables or enables all buttons on a given gui (if 'enable' is true, enables, if false, disables all)
//Disabling a button is a quite important and unique feature: 
// - it's still visible
// - it's not clickable
// - it doesn't give graphical feedback! (when the mouse hovers it or when you click on it)
void GUI_DisableEnable_AllButtons(GUI* g,  bool enable)
{
    GUIControl* c;
    int i=0;
    while (i<g.ControlCount) {
      c=g.Controls[i];
      Button* b = c.AsButton;
      if (b!=null)
        b.Enabled=enable;
      i++;
    }
}


bool playerUI_state_isEnabled = false; //if PlayerUI_Disable  got called

*/


static void PlayerUI::Disable()
{
 
  //PauseGame();
  
  //DisableInterface(); //FOR TESTING
  /* hadrien
  GUI_DisableEnable_AllButtons(gIconbar,    false);
  GUI_DisableEnable_AllButtons(gInventory,  false);
  GUI_DisableEnable_AllButtons(gDialog,     false);
  
  playerUI_state_isEnabled = false;
  */
  
  //disable_gui();
  Verbs.DisableGui();
}

static void PlayerUI::Enable()
{

  /* hadrien
  
  UnPauseGame(); //safety
  //EnableInterface();    

  GUI_DisableEnable_AllButtons(gIconbar,    true);
  GUI_DisableEnable_AllButtons(gInventory,  true);
  GUI_DisableEnable_AllButtons(gDialog,     true);
  
  playerUI_state_isEnabled = true;
  */
  
  //enable_gui();
  Verbs.EnableGui();
}

static void PlayerUI::Hide()
{
  /* old way
  //gInventory.Clickable = false; //doesn't make sense, considering the line below)
  gInventory.Visible = false;
  //gIconbar.Clickable = false; //doesn't make sense, considering the line below)
  gIconbar.Visible = false;
  gStatusline.Visible = false;
  
  //gControlmenu.Visible = false; //safety
  */
  
  //hide_gui();
  Verbs.HideGui();
}

static void PlayerUI::Show()
{
  /* old way
  gInventory.Visible = true;
  gIconbar.Visible = true;
  gStatusline.Visible = true;
  gInventory.Transparency = 100;
  gIconbar.Transparency = 100;
  gStatusline.Transparency = 100;
  gInventory.TweenTransparency(1.0, 0, eEaseOutTween, eNoBlockTween);
  gIconbar.TweenTransparency(1.0, 0, eEaseOutTween, eNoBlockTween);
  gStatusline.TweenTransparency(1.0, 0, eEaseOutTween, eNoBlockTween);*/
  
  Verbs.ShowGui();
}

/*
//used by PlayerUI_SaveState and PlayerUI_RestoreState
bool playerUI_state_wasEnabled = false;
bool playerUI_state_wasVisible = false;

 //saves the state of the player's ui : is it currently visible? enabled? etc.
static void PlayerUI::SaveState()
{
  playerUI_state_wasEnabled = playerUI_state_isEnabled;
  playerUI_state_wasVisible = gIconbar.Visible;
}

//restores the player's ui as it was when PlayerUI_SaveState got called
static void PlayerUI::RestoreState()
{
  if (playerUI_state_wasVisible)
    PlayerUI.Show();
    
  if (playerUI_state_wasEnabled)
    PlayerUI.Enable();
}

*/





static void PlayerUI::DisableAndHide()
{
  PlayerUI.Disable();
  PlayerUI.Hide();
}

static void PlayerUI::EnableAndShow()
{
  PlayerUI.Show();
  PlayerUI.Enable();   
}


static void GUIlogic::Pause(bool silent)
{
  if (!debugPause)
  {
    //PauseGame();
    PlayerUI.Disable();
    //Mouse.Visible = false; 
    //gPauseBar.Visible = true;
    RealPause.Pause(silent);
  }
  else
  {
    Display("bad scripting. You should not try to unpause during debug pause");
  }
}

static void GUIlogic::UnPause()
{
  if (!debugPause)
  {
    //UnPauseGame();
    PlayerUI.Enable();
    //Mouse.Visible = true;  
    //gPauseBar.Visible = false;
    RealPause.Unpause();
  }
  else
  {
    Display("bad scripting. You should not try to unpause during debug pause");
  }
}


static void GUIlogic::DebugPause()
{
  GUIlogic.Pause(false);
  debugPause = true;
}

static void GUIlogic::DebugUnPause()
{
  debugPause=false;
  GUIlogic.UnPause();
}

 
static bool GUIlogic::IsDebugPaused()
{
  return debugPause;
}

static bool GUIlogic::IsInSpecialRoom()
{
  if (   player.Room == 1  //Splash screen
      || player.Room == 20 //disclaimer
      || player.Room == 12 //checkpoint selection
  ) {
    return true;
  }
  return false;
}

 
 bool spaceIsHeldToPause, spaceIsHeldToUnpause;
    
// Note: the function below comes from here :
// http://www.adventuregamestudio.co.uk/forums/index.php?topic=42678.msg566300#msg566300
// Credit goes to Ryan Timothy .
static void GUIlogic::HandleSpaceBar()
{
    bool blockingGui =     gAgsconsole.Visible
                        || gTestersName.Visible;
                        
    if (!debugPause)
    {
      if (IsKeyPressed(eKeySpace) && !RealPause.IsPaused() && !blockingGui)
      {
        GUIlogic.Pause(false);
        spaceIsHeldToPause=true;
      }
      else if (spaceIsHeldToPause && !IsKeyPressed(eKeySpace)) spaceIsHeldToPause=false;
      else if (!spaceIsHeldToPause && IsKeyPressed(eKeySpace) && RealPause.IsPaused()) spaceIsHeldToUnpause=true;
      else if (spaceIsHeldToUnpause && !IsKeyPressed(eKeySpace) && RealPause.IsPaused()  && !blockingGui)
      {
        GUIlogic.UnPause();
        spaceIsHeldToUnpause=false;
      }
    }
}



static void GUIlogic::TitleMenu_Show()
{
   
  //in case the secondary popups are already visible, we hide them
  //gQuitToTitle.Visible = false; //that's the little confirmation popup that we use from time to time
  //gDialog.Visible = false;
  //gDialog2.Visible = false;

  //we show only the "real" menu screen
  gTitleMenu.Visible = true;  
}


static void GUIlogic::TitleMenu_Hide()
{
  //we hide everything
  //gQuitToTitle.Visible = false; //that's the little confirmation popup that we use from time to time
  //gDialog.Visible = false;
  //gDialog2.Visible = false;
  gTitleMenu.Visible = false;  
}

    /*
static void ControlPanel::Enter()
{ 
    //GUIlogic.PlayerUI_DisableAndHide(); //hides the inventory, etc. and makes them unclickable
    PlayerUI.SaveState();
    GUIlogic.Pause(true);
    PlayerUI.Disable();
    
    gControlmenu.Visible = true; //show our little menu popup
    
    Mouse.Visible = true; //we make sure the mouse is visible in case we were in a cutscene, or a pause, or something
    //EnableInterface();    //same as above
    
}


static void ControlPanel::Exit()
{
  
    //PlayerUI.EnableAndShow(); //shows the inventory, etc. and makes them clickable
    //PlayerUI.Enable();
    PlayerUI.RestoreState();
    GUIlogic.UnPause();
    
    gControlmenu.Visible = false; //hide our little menu popup
     
    
    Mouse.Visible = true; //that should already be the case... but just in case!
    //EnableInterface();    //that should already be the case... but just in case!
}

*/
    
///////////////////////////////////
//
//        OLD CUSTOM LOAD (OBSOLETE)
//
///////////////////////////////////

/*
int loadVar = 0; //this is meant to help detecting a double-click (I think)

static void CustomLoad::ManageTimer() {
  
//  if (IsTimerExpired(2)) { // if you click after 1 second you continue normal process of load-click
 if (Timer.IsExpired("timer_load")) {
   loadVar = 0; // otherwise if you click within 1 second loadVar stays on 1 so it can become 2 and thus load game through double click
 } 
 
}

static void CustomLoad::OnSelectionChange(GUIControl *control) {
 //put the selection in the save txt box
 txtLoadName.Text = lstLoadGames.Items[lstLoadGames.SelectedIndex];
  
 if (gLoad.Visible == true) {
   loadVar += 1; //Check if load-click should happen
  //SetTimer(2, 40);
  Timer.Set("timer_load", 40);
    
  // check for double-click 
    if (loadVar == 2) {  
      int totalLoads = lstLoadGames.ItemCount; //holds number of saves in the list
      if (totalLoads >= 1) {
        txtLoadName.Text = lstLoadGames.Items[0];
        String loadName = txtLoadName.Text; //holds TXT for Save Name; from use
        //check that a name was entered to avoid problems
        if(loadName == "") {
          Display("Please select a saved game to be loaded.");
          return;
        }
        //no highlighted item
        if (lstLoadGames.SelectedIndex == -1) {
          Display("Please select a saved game to be loaded");
        }
        //an item is selected...
        else if(lstLoadGames.SelectedIndex >= 0) {
          RestoreGameSlot(savegameindex[lstLoadGames.SelectedIndex]);
          gLoad.Visible = false;
          
          PlayerUI.EnableAndShow();
        }
      } else {
        Display("Sorry, no save files have been detected.");
      }
    } else {
    }
  }
 }

static void CustomLoad::Show() {
  txtLoadName.Clickable = false;
  txtLoadName.Enabled = false;
  //Prep the GUI
  lstLoadGames.FillSaveGameList();
  lstLoadGames.SelectedIndex = 0;
  //Activate the load GUI
  gLoad.Visible = true;
  gLoad.Centre();   

  
}
*/

/*
static void CustomLoad::Done_OnClick() {
  gLoad1.Visible=false;
  ControlPanel.Exit(); //that works for everything
}
*/
/*
static void CustomLoad::Load_OnClick() {

 int totalLoads = lstLoadGames.ItemCount; //holds number of saves in the list
 if (totalLoads >= 1) {
   txtLoadName.Text = lstLoadGames.Items[0];
    
   String loadName = txtLoadName.Text; //holds TXT for Save Name; from use
   //check that a name was entered to avoid problems
   if(loadName == "") {
   Display("Please select a saved game to be loaded.");
    return;
   }
   //no highlighted item
   if (lstLoadGames.SelectedIndex == -1) {
    Display("Please select a saved game to be loaded");
   }
   //an item is selected...
   else if(lstLoadGames.SelectedIndex >= 0) {
     RestoreGameSlot(savegameindex[lstLoadGames.SelectedIndex]);
     gLoad1.Visible = false;

     //PlayerUI.EnableAndShow(); //shows the player's controls (inventory, etc.)
     ControlPanel.Exit();

   }
 } else {
   Display("Sorry, no save files have been detected.");
 }
}

///////////////////////////////////
//
//        OLD CUSTOM SAVE (OBSOLETE)
//
///////////////////////////////////


static void CustomSave::Show() {
  //Prep the GUI
  lstSaveGames.FillSaveGameList();
  lstSaveGames.SelectedIndex = 0; // start at first save
  if(lstSaveGames.SelectedIndex != -1)
  {
    txtSaveName.Text = lstSaveGames.Items[lstSaveGames.SelectedIndex];
  }
  //Activate the save GUI
  gSave.Visible = true;
  gSave.Centre();  
}
*/

/*
static void CustomSave::Done_OnClick() {

  gSave.Visible = false;
  ControlPanel.Exit(); //that works for everything
}
*/

/*
static void CustomSave::Save_OnClick() {
  int totalSaves = lstSaveGames.ItemCount; //number of saves on list
  String saveName = txtSaveName.Text; //holds value of txtSaveName
  // check for a save name. If none, tell them.  Else, go on.
  if(saveName == "") {
    Display("Please enter a name for your saved game.");
   return;
  }
  //If there is no saved games yet, just save it.
  if(lstSaveGames.SelectedIndex == -1) {
    gSave.Visible = false;
    SaveGameSlot(totalSaves+1, saveName);

    ControlPanel.Exit();

  } else {
    int checkSave = 0; //runs through the list and checks for double entries
    while(checkSave != totalSaves) {
      if(saveName == lstSaveGames.Items[checkSave]) {
        //if so, overwrite the selected save game
        gSave.Visible = false;
        SaveGameSlot(savegameindex[checkSave], saveName);

        //PlayerUI.EnableAndShow(); //shows the player's controls (inventory, etc.)
        ControlPanel.Exit();
        return;
      }
      checkSave++;
    }
    //if we've made it here, then there is no match; just save to a new slot.
    if(totalSaves < 20) {
      gSave.Visible = false;
      SaveGameSlot(totalSaves+1, saveName);

      //PlayerUI.EnableAndShow(); //shows the player's controls (inventory, etc.)
      ControlPanel.Exit();
    } else {
      Display("The maximum number of saved games has been reached; overwrite or delete some old ones.");
    }
  }

}


static void CustomSave::OnSelectionChange(GUIControl *control) {
  //put the selection in the save txt box
  txtSaveName.Text = lstSaveGames.Items[lstSaveGames.SelectedIndex];
}

*/




///////////////////////////////////
//
//        NEW CUSTOM SAVE/LOAD
//
///////////////////////////////////



//--------------------------------------------------------------------------------------------------------------
// A.S.S. - Another Savegames with Screenshots template - v1.4 released 12.07.2011
// Original code by Spyros. Enhanced and ported to AGS 3+ code by hedgefield
// Turned object by Mathieu B. aka Monsieur Ouxx
//--------------------------------------------------------------------------------------------------------------

/*
struct CustomSaveLoad2 {
  int SL_WIDTH;                                                       // Screenshot width
  int SL_HEIGHT;                                                       // Screenshot height
  String SL_TEXT;                                                           // Stores the typed text
  bool SL_DATETIME;                                                 // Toggle to save date and time in savegame
  int saveslot;                                                         // Stores the selected savegame slot
  int totalsaves;                                                       // Stores the total number of savegames
  DynamicSprite *screenshot;                                                // Stores the screenshot

  import static void Game_Start();
};

CustomSaveLoad2 customSaveLoad2Data;

static void CustomSaveLoad2::Game_Start()
{
  customSaveLoad2Data.SL_WIDTH = 128;                                                       // Screenshot width
  customSaveLoad2Data.SL_HEIGHT = 96;                                                       // Screenshot height
  customSaveLoad2Data.SL_DATETIME = true;                                                 // Toggle to save date and time in savegame
  customSaveLoad2Data.saveslot = 0;                                                         // Stores the selected savegame slot
  customSaveLoad2Data.totalsaves = 0;   
  
  SetGameOption(OPT_SAVEGAMESCREENSHOTS, 1);
  //enhances the resolution of the screenshots:
  game.screenshot_width = System.ViewportWidth;
  game.screenshot_height = System.ViewportHeight;
}

*/

///////////////////////////////////
//
//        NEW CUSTOM LOAD
//
///////////////////////////////////


/*

static void CustomLoad2::Show() {
  lstLoadGames2.FillSaveGameList();                                        // Fill List Box with saved games
  lstLoadGames2.SelectedIndex = -1;                                        // Deselect savegame slots
  customSaveLoad2Data.totalsaves = lstLoadGames2.ItemCount;                                    // Count how many saved games there are
  gLoad2.Visible = true;                                                   // Opens the load GUI
  gLoad2.Centre();                                                         // Centres the load GUI
  //mouse.Mode = eModePointer;                                              // Set the pointer cursor
  
}
static void CustomLoad2::Gui_OnClick() {
  lstLoadGames2.SelectedIndex = -1; // Deselect savegame slots
}

static void CustomLoad2::Close_OnClick() {
  gLoad2.Visible = false;
  ControlPanel.Exit();
  

  if (customSaveLoad2Data.screenshot != null) {
    customSaveLoad2Data.screenshot.Delete();
    btnLoadScreen.NormalGraphic = 0;                                      // Clears the screenshot
  }
}

static void CustomLoad2::Load_OnClick() {
  if (lstLoadGames2.SelectedIndex >= 0) {
    customSaveLoad2Data.saveslot = lstLoadGames2.SelectedIndex;                                // Gets the selected slot
    gLoad2.Visible = false;
    ControlPanel.Exit();

    if (customSaveLoad2Data.screenshot != null) {
      customSaveLoad2Data.screenshot.Delete();
      btnLoadScreen.NormalGraphic = 0;                                    // Clears the screenshot
    }
    RestoreGameSlot(lstLoadGames2.SaveGameSlots[customSaveLoad2Data.saveslot]);                // Restores the selected slot
  }
  else if (customSaveLoad2Data.totalsaves>0) Display("Please select a savegame.");
  else Display("There are no savegames yet!");
  
}

static void CustomLoad2::Delete_OnClick() {
 
  if (lstLoadGames2.SelectedIndex > -1) {                                  // You've selected a saveslot
    customSaveLoad2Data.saveslot = lstLoadGames2.SelectedIndex;                                // Gets the selected slot
    DeleteSaveSlot(savegameindex[customSaveLoad2Data.saveslot]);                              // Deletes the savegame
    if (customSaveLoad2Data.screenshot != null) {
      customSaveLoad2Data.screenshot.Delete();
      btnLoadScreen.NormalGraphic = 0;                                    // Clears the screenshot
    }
    lstLoadGames2.FillSaveGameList();                                      // Fill List Box with saved games
    lstLoadGames2.SelectedIndex = -1;                                      // Deselect savegame slots
    customSaveLoad2Data.totalsaves = lstLoadGames2.ItemCount;
  }
  else Display("Select a savegame to delete.");
}

static void CustomLoad2::OnSelectionChange(GUIControl *control) {
  // Updates screenshot display when selecting a different slot
  customSaveLoad2Data.saveslot = lstLoadGames2.SelectedIndex;                                  // Gets the selected slot
  customSaveLoad2Data.screenshot = DynamicSprite.CreateFromSaveGame(lstLoadGames2.SaveGameSlots[customSaveLoad2Data.saveslot], customSaveLoad2Data.SL_WIDTH, customSaveLoad2Data.SL_HEIGHT);
  if (customSaveLoad2Data.screenshot != null) {
    btnLoadScreen.NormalGraphic = customSaveLoad2Data.screenshot.Graphic;                     // Updates the screenshot
  }
}

///////////////////////////////////
//
//        NEW CUSTOM SAVE 
//
///////////////////////////////////



static void CustomSave2::Delete_OnClick() {
 
  if (lstSaveGames2.SelectedIndex > -1) {                                  // You've selected a saveslot
    customSaveLoad2Data.saveslot = lstSaveGames2.SelectedIndex;                                // Gets the selected slot
    DeleteSaveSlot(savegameindex[customSaveLoad2Data.saveslot]);                              // Deletes the savegame
    if (customSaveLoad2Data.screenshot != null) {
      customSaveLoad2Data.screenshot.Delete();
      btnLoadScreen.NormalGraphic = 0;                                    // Clears the screenshot
    }
    lstSaveGames2.FillSaveGameList();                                      // Fill List Box with saved games
    lstSaveGames2.SelectedIndex = -1;                                      // Deselect savegame slots
    customSaveLoad2Data.totalsaves = lstSaveGames2.ItemCount;
  }
  else Display("Select a savegame to delete.");
}

static void CustomSave2::Show() {
  Wait(1);
  customSaveLoad2Data.screenshot = DynamicSprite.CreateFromScreenShot(customSaveLoad2Data.SL_WIDTH, customSaveLoad2Data.SL_HEIGHT);   // Create screenshot of current game
  if (customSaveLoad2Data.screenshot != null) {
    btnSaveScreen.NormalGraphic = customSaveLoad2Data.screenshot.Graphic;                     // Display current screenshot
  }
  txtSaveName2.Text = "";                                                  // Clear Text box
  lstSaveGames2.FillSaveGameList();                                        // Fill List Box with saved games
  lstSaveGames2.SelectedIndex = -1;                                        // Deselect savegame slots
  customSaveLoad2Data.totalsaves = lstSaveGames2.ItemCount;                                    // Count how many saved games there are 
  gSave2.Visible = true;                                                   // Opens the save GUI
  gSave2.Centre();                                                         // Centres the save GUI
  //mouse.Mode = eModePointer;                                              // Set the pointer cursor

}

static void CustomSave2::Gui_OnClick() {
    lstSaveGames2.SelectedIndex = -1;  // Deselect savegame slots
}

static void CustomSave2::Close_OnClick() {
  gSave2.Visible = false;
  ControlPanel.Exit();
  

  if (customSaveLoad2Data.screenshot != null) {
    customSaveLoad2Data.screenshot.Delete();
    btnSaveScreen.NormalGraphic = 0;                                      // Clears the screenshot
  }
}


static void CustomSave2::Save_OnClick() {
  DateTime *dt = DateTime.Now;
  if (lstSaveGames2.SelectedIndex >= 0) {                                  // If you've selected a savegame slot
    customSaveLoad2Data.saveslot = lstSaveGames2.SelectedIndex;                                // Get the selected savegame
    if (customSaveLoad2Data.SL_DATETIME == false) customSaveLoad2Data.SL_TEXT = txtSaveName2.Text;                 // Gets the typed text
    else customSaveLoad2Data.SL_TEXT = String.Format("%s - %02d/%02d/%04d %02d:%02d", txtSaveName2.Text, dt.DayOfMonth, dt.Month, dt.Year, dt.Hour, dt.Minute);
    if (customSaveLoad2Data.screenshot != null) {
      customSaveLoad2Data.screenshot.Delete();
      btnSaveScreen.NormalGraphic = 0;                                    // Clears the screenshot      
    }
    gSave2.Visible = false;
    ControlPanel.Exit(); //that works for everything
    

    Mouse.Mode = eModeUsermode2;
    Wait(1);
    SaveGameSlot(lstSaveGames2.SaveGameSlots[customSaveLoad2Data.saveslot], customSaveLoad2Data.SL_TEXT);          // Overwrites the selected game
  }
  else {                                                                  // Save the game in a new slot
    if (customSaveLoad2Data.totalsaves < 50) {                                                // If the savegame limit is not reached (50)
      if (txtSaveName2.Text == "") {
        Display("Please enter a name for your savegame.");                // If player didn't enter a name, tell them
      }
      else {                                                              // Proceed as usual
        if (customSaveLoad2Data.SL_DATETIME == false) customSaveLoad2Data.SL_TEXT = txtSaveName2.Text;             // Gets the typed text
        else customSaveLoad2Data.SL_TEXT = String.Format("%s - %02d/%02d/%04d %02d:%02d", txtSaveName2.Text, dt.DayOfMonth, dt.Month, dt.Year, dt.Hour, dt.Minute);
        if (customSaveLoad2Data.screenshot != null) {
          customSaveLoad2Data.screenshot.Delete();
          btnSaveScreen.NormalGraphic = 0;                                // Clears the screenshot
        }
        gSave2.Visible = false;
        ControlPanel.Exit(); //that works for everything
        
        Wait(1);
        SaveGameSlot(customSaveLoad2Data.totalsaves+1, customSaveLoad2Data.SL_TEXT);                              // Saves game (text as description)
      }
    }
    else Display("All save slots are full. Please overwrite a previous save.");
  }

  

}


static void CustomSave2::OnSelectionChange(GUIControl *control) {
  // Updates textbox contents when selecting an existing slot
   txtSaveName2.Text = lstSaveGames2.Items[lstSaveGames2.SelectedIndex];
}



///////////////////////////////////
//
//        CONTROL PANEL
//
///////////////////////////////////


// static void ControlPanel::Enter()//defined earlier in the file because of dependencies
// {
//    ...
// }


// static void ControlPanel::Exit() //same as above
// {
//    ...
// }

static void ControlPanel::Save_OnClick() {
  mouse.UseDefaultGraphic();
  Wait(1);
  gControlmenu.Visible = false;
  CustomSave2.Show();  
}

static void ControlPanel::Load_OnClick() {
  mouse.UseDefaultGraphic();
  Wait(1);
  gControlmenu.Visible = false;
  PauseGame();
  CustomLoad2.Show();
}

static void ControlPanel::Resume_OnClick() {
  //mouse.UseDefaultGraphic();
  //gControlmenu.Visible = false;
  
  //UnPauseGame();
  //gInventory.Clickable = true;
  //gIconbar.Clickable = true;
  
  //PlayerUI.EnableAndShow(); //shows the player's controls (inventory, etc.)
  ControlPanel.Exit();
}  

static void ControlPanel::Exit_OnClick() {
  quitTag.Clickable = false;
  quitTag.Enabled = false;
  gQuitMenu.Visible = true;
  gQuitMenu.Centre();
}  

static void ControlPanel::Menu_OnClick() {
  menuQuitTag.Clickable = false;
  menuQuitTag.Enabled = false;
  gQuitToTitle.Visible = true;
  gQuitToTitle.Centre();
}  
*/
bool DisclaimerTickbox_checked = false; //initially off


void updateTickbox()
{
  if (DisclaimerTickbox_checked) {
    bDisclaimerTickbox.NormalGraphic = 359;
  } else {
    bDisclaimerTickbox.NormalGraphic = 360;
  }
}

static void Disclaimer::Tickbox_OnClick() {
  DisclaimerTickbox_checked = !DisclaimerTickbox_checked;
  updateTickbox();
  
}




void showDisclaimerButtons() {
  bDisclaimerExit.Visible = true;
  bDisclaimerProceed.Visible = true;
  bDisclaimerTickbox.Visible = true;
  labelPester.Visible = true;
}

void hideDisclaimerButtons() {
  bDisclaimerExit.Visible = false;
  bDisclaimerProceed.Visible = false;
  bDisclaimerTickbox.Visible = false;  
  labelPester.Visible = false;
}

static void Disclaimer::saveIni()
{
   iniFile.WriteBool("Misc", "showDisclaimer", DisclaimerTickbox_checked);
   iniFile.Save(iniFileName);
}

static bool Disclaimer::readIni()
{
  
  //look in the ini file (if any) if the player previously ticked "don't pester me again"
  if (!iniFile.Load(iniFileName)) { //the file was never created before (first-time playing game)
    iniFile.WriteBool("Misc", "showDisclaimer", true);
    iniFile.Save(iniFileName);
  }
  else if (!iniFile.KeyExists("Misc", "showDisclaimer")) {
    iniFile.WriteBool("Misc", "showDisclaimer", true);
    iniFile.Save(iniFileName);
  }
  
  gDisclaimer.Visible = true; //we show the message in any case
  
  DisclaimerTickbox_checked = iniFile.ReadBool("Misc", "showDisclaimer"); //does the ini file tell us to show the disclaimer?
  if (DisclaimerTickbox_checked) {//yes it does
    showDisclaimerButtons();
  }  else  {  //no it doesn't
    hideDisclaimerButtons();
    //We'll also play a little animation after fade-in
  }  
  
  updateTickbox(); //sync the display with the game's logic
  return DisclaimerTickbox_checked;
}
  
static void Disclaimer::Proceed_OnClick() {
  Disclaimer.saveIni(); //Remember player's choice
  
  gDisclaimer.Visible = false;
  
  //proceed to logo screen
  player.ChangeRoom(eRoom_GUI_00_TitleMenu, 1, 1);
}

static bool Disclaimer::shouldShowDisclamer()
{
  return DisclaimerTickbox_checked;
}






///////////////////////////////////
//
//        TITLE MENU
//
///////////////////////////////////



static void TitleMenu::Quit_OnClick()
{
  gTitleMenu.Visible = false;
  QuitGame(0);  
}

static void TitleMenu::Load_OnClick()
{
    /*
  mouse.UseDefaultGraphic();
  Wait(1);
  //gControlmenu.Visible = false;
  PlayerUI.SaveState();
  CustomLoad2.Show();
  */
} 

static void TitleMenu::NewGame_OnClick()
{
  gTitleMenu.Visible = false;
  player.ChangeRoom(eRoom_02_00_ChalkboardHand, 319, 199); //teleports player to 'chalkboard' room and thus starts opening cutscene
  
} 

   
   

///////////////////////////////////
//
//        on_key_press
//
///////////////////////////////////

void ShowOptions()
{
    Verbs.UpdateActionBar();
    OptionGui.ShowOptions();
}


function on_key_press(int keycode) 
{
  
  if (!GUIlogic.IsDebugPaused())
  {
      if (keycode==eKeyF5) {   // F5
        // If it's not the main menu screen, then proceed
        if (!GUIlogic.IsInSpecialRoom()) {
          
          if (IsGamePaused() == 1) { //we allow the player to call the menu even when the game is paused
            //we keep the game paused,
            //but we enable the mouse and allow the GUI clicks
            
            
            //Mouse.Visible = true; 
            //EnableInterface();  
            
            GUIlogic.UnPause();
            
          }
          
          ShowOptions();
          
          //gInventory.Clickable = false;
          //gIconbar.Clickable = false;
          //gControlmenu.Visible = true;
          
          
          
        }             
      }
  }
}









//For some reason, on_event allows us to catch simple clicks, and on_mouse_click mouse wheel.
//We gather the processing here.
function on_mouse_click_allclicks(MouseButton button)
{
    CheckpointsGui.OnMouseClick(button);
    
}

function on_event (EventType event, int data)
{ 
    //CLICK
    if (event == eEventGUIMouseUp) {
        on_mouse_click_allclicks(eMouseLeft); //We transform it into a left click even though we don't know

    }
}

function on_mouse_click(MouseButton button)
{
    // == MOUSE WHEEL ==
    if (button == eMouseWheelNorth || button == eMouseWheelSouth) {
        on_mouse_click_allclicks(button); 
    }
    

}




void game_start()
{
    //CustomSaveLoad2.Game_Start();
}

