// room script file
bool noseBool = false; // Nose message rotate
bool cabinetClose = true; // Cabinet is closed
bool needKey = true; // Still need office key to open cabinet
bool needOil = true; // Still need oil to open cabinet
bool needBang = true; //Still needs a bang (hammer) to open the cabinet
bool shelfBool = false; // Shelf message rotate
bool telegramTaken = false; // Telegram has not been taken from cabinet 
bool doorClose = false; // the door is closed

function room_Load()
{
  aMusic4.Play();
  Doors7COG.OnEnterRoom(); //this function must be called in EVERY ROOM that contains a door
}
// Hotspots

// Telephone
function hTelephone_AnyClick()
{
  Action usedAction = Verbs.GetUsedAction();  
  switch(usedAction){
    case eGA_Use: 
      Verbs.AnyClickWalkLook(99, 6, eDirectionLeft, "Pointless... Marcus is not at home."); 
      Verbs.AnyClickWalkLook(99, 6, eDirectionDown, "I hope the mobile phone will be invented soon."); 
      break;
    case eGA_LookAt: Verbs.AnyClickWalkLook(170, 130, eDirectionLeft, "It's my telephone."); break;
    default:
      Verbs.Unhandled();
      break;
  }
}


// Papers
function hPapers_AnyClick()
{
  Action usedAction = Verbs.GetUsedAction();
  switch(usedAction){
    case eGA_GiveTo:  
    case eGA_Pull: 
    case eGA_Push: 
    case eGA_UseInv: 
      Verbs.AnyClickWalkLook(99, 6, eDirectionLeft, "It's already a mess, I don't want to make it worse.");
      break;
    case eGA_Use: Verbs.AnyClickWalkLook(99, 6, eDirectionLeft, "No, I don't want to mark these terrible papers now."); break;
    case eGA_LookAt: Verbs.AnyClickWalkLook(99, 6, eDirectionLeft, "My students' work. What a mess."); break;
    default:
      Verbs.Unhandled();
      break;
  }
}

// Window
function hWindow_AnyClick()
{
  Action usedAction = Verbs.GetUsedAction();
  switch(usedAction){
    case eGA_Close: Verbs.AnyClickWalkLook(2, 110, eDirectionLeft, "The window is already shut."); break;
    case eGA_LookAt: Verbs.AnyClickWalkLook(2, 110, eDirectionLeft, "It looks like a nice day outside."); break;
    case eGA_Open: Verbs.AnyClickWalkLook(2, 110, eDirectionLeft, "I don't need to open the window right now."); break;
    default:
      Verbs.Unhandled();
      break;
  }
}

// Desk
function hDesk_AnyClick()
{
  Action usedAction = Verbs.GetUsedAction();
  
  player.FaceLocation(hDesk.WalkToX, hDesk.WalkToY);
  
  switch(usedAction){
    case eGA_Pull: player.Say("That's a bad idea, last time I did that I threw out my back."); break;
    case eGA_Push: player.Say("That's a bad idea, last time I did that I threw out my back."); break;
    case eGA_Close: player.Say("The drawer is already closed."); break;
    case eGA_LookAt: player.Say("It's my desk."); break;
    case eGA_Open: player.Say("There's nothing in the drawer, why bother?"); break;
    default:
      Verbs.Unhandled(eHeavy);
      break;
  }
}

// Roman Statue
function hRomStat_AnyClick()
{
  
  Action usedAction = Verbs.GetUsedAction();
  switch(usedAction){
    case eGA_LookAt: Verbs.AnyClickWalkLook(1, 126, eDirectionLeft, "It's a rare Ancient Roman statue of an Emperor's two pets: We believe that one of them was called Maximus."); break;
    case eGA_Open: Verbs.AnyClickWalkLook(1, 126, eDirectionLeft, "I don't think that will work."); break;
    case eGA_PickUp: Verbs.Unhandled(eHeavy); break;
    default:
      Verbs.Unhandled();
      break;
  }
}


// Sphinx Nose
function hNose_AnyClick()
{
  Action usedAction = Verbs.GetUsedAction();
  switch(usedAction){
    case eGA_LookAt: Verbs.AnyClickWalkLook(317, 116, eDirectionLeft, ""); 
      player.FaceLocation(317, 116, eBlock);
      if (noseBool == false) {
        player.Say("Poor Marcus... He bought this from a street vendor in Cairo. He insists that it is actually the nose from the Sphinx...");
        noseBool = true;
      } else if (noseBool == true) {
        player.Say("Now why did I let Marcus talk me into keeping this in here?");
      }
      break;
    default:
      Verbs.Unhandled(eHeavy);
      break;
  }
}

// Chuck the Plant
function hChuck_AnyClick()
{
  
  Action usedAction = Verbs.GetUsedAction();
  switch(usedAction){
    case eGA_Pull: 
    case eGA_Push:
    case eGA_Close: 
    case eGA_Open: 
    case eGA_PickUp: 
      Verbs.AnyClickWalkLook(200, 69, eDirectionLeft, "I think that Chuck is fine where he is."); 
      break;
    case eGA_LookAt: Verbs.AnyClickWalkLook(200, 69, eDirectionLeft, "This used to be at my father's house, but he gave it to me as a gift last year."); break;
    case eGA_TalkTo: Verbs.AnyClickWalkLook(200, 69, eDirectionLeft, "Hi Chuck!"); break;
    default:
      Verbs.Unhandled();
      break;
  }
}


// Shelves
function hShelves_AnyClick()
{
  Action usedAction = Verbs.GetUsedAction();
  switch(usedAction){
    case eGA_PickUp: 
      player.FaceLocation(166, 37, eBlock);
      if (shelfBool == false) {
        player.Say("I don't need anything from there.");
      } else if (shelfBool == true) {
        player.Say("No, there is nothing from the shelf I need.");
      }
      break;
    case eGA_LookAt: Verbs.AnyClickWalkLook(166, 37, eDirectionLeft, "Just some oddities I've collected in my travels..."); break;
    default: Verbs.Unhandled(); break;
  }
}

// Objects


function hCabinet_Open() {
    if (cabinetClose == true) { //The cabinet is still closed
      if (needKey == true) {
        player.Say("It's locked. I need my office key to open it.");
        DialogsLogic.SetVarBool("eDialog_IndyShouldAskKeyToIrene", true); //Indy will now be able to ask the key to irene 
      }
    
      if (needKey == false && needOil == true) { //it still needs the oil
        player.Say("It's all gripped.");
        DialogsLogic.SetVarBool("eDialog_IndyShouldAskKeyToIrene", false); //Indy doesn't need to ask the key
      }
    
      if (needKey == false && needOil == false && needBang == true) {  //it still needs the bang (hammer)
        player.Say("It's not gripped anymore...");
        player.Say("...But it would need a proper shock to be released.");
      }
      
      if (needKey == false && needOil == false&& needBang == false) { //it can be open
        DialogsLogic.SetVarBool("eDialog_IndyShouldAskKeyToIrene", false); //Indy doesn't need to ask the key
        aSound4.Play();
        cabinet.Graphic = 36;
        cabinetClose = false;
      }
     } else if (cabinetClose == false) { //the cabinet is open
      player.Say("It's already open.");
      cabinetClose = false;
      DialogsLogic.SetVarBool("eDialog_IndyShouldAskKeyToIrene", false);
    }  
}

function HammerAnim() {
  Display("Not implemented : Indy take out his hammer");
}

// Use Inventory
function hCabinet_UseInv()
{  
  //Display(String.Format("GetUSeItem()=%d, needKey=%d, needOil=%d", GetUseItem(), needKey,  needOil ));
  if (player.ActiveInventory == iOilCan && needKey == false) {
    if (needOil == true) 
    {
      player.Say("There! The oil has eased the drawer...");
      player.Say("But it's still in the wrong position. What it needs now is a good bang.");
      needKey = false;
      needOil = false;
      needBang=true;
      GiveScore(1);
    } else {
      player.Say("It doesn't need any more oil. What it needs is a good bang.");
    }
  } else if (player.ActiveInventory == iKey && needKey == true) {
    
      aSound4.Play();
      cabinet.Graphic = 253; //Stuck cabinet image
      WAIT 15 PLEASE
      cabinet.Graphic = 37; //closed cabinet image
      WAIT 15 PLEASE
      cabinet.Graphic = 253; //Stuck cabinet image
      WAIT 15 PLEASE
      aSound4.Play();
      
      player.Say("Dang. The cabinet is stuck. I knew I should have had someone fix it before.");
      player.Say("I guess some lubricant would help.");
       
      //player.Say("Oh great, now the key is stuck in the lock. I'll need to free it somehow...");
      needKey = false;
      player.LoseInventory(iKey);
  } else if (player.ActiveInventory == iBarnett_Hammer2) { //Copy of the hammer    
    if (needKey) {
      player.Say("Now, now. It opens with a key.");
    } else if (needOil) {
      player.Say("A shock would help, but if I don't lubricate it first, I'll just break it.");
      player.Say("The lock would be completely stuck.");
    } else if (needBang) {
      if (DialogsLogic.GetVarBool("eDialog_IndyConfusedHammers") && !DialogsLogic.GetVarBool("eDialog_IndySortedHammers")) {
        player.Say("I'm not using those hammers until I'm sure which one is the fake one.");
      }
      else
      {
        if (!DialogsLogic.GetVarBool("eDialog_IndySortedHammers")) { //Indy hasn't sorted the hammers yet
          player.Say("And now, it's time to give it a good shock.");
          HammerAnim();
          WAIT_100
          player.Say("Wait.");
          WAIT_80
          player.Say("Oh, dear. Which one is the real hammer again?");
          player.Say("They look exactly the same!");
          player.FaceDirection(eDown);
          WAIT_80
          player.Say("The copy club seems to have made enormous progress. I'm in big trouble.");  
          iBarnett_Hammer1.Name= "a hammer";
          iBarnett_Hammer2.Name= "another hammer";
          DialogsLogic.SetVarBool("eDialog_IndyConfusedHammers",  true);   //we save that state of the game in a global variable  
        } else { //"eDialog_IndySortedHammers"=1 -- Indy has sorted the hammers
           player.Say("OK, that's the fake hammer for sure.");   
           HammerAnim();
           cSoundEffects.ChangeRoom(6,  240,  94);
           cSoundEffects.Say("*BANG!*");
           aSound4.Play(); //cabinet opening
           //WAIT_100
           cSoundEffects.x = 292;
           cSoundEffects.y = 70;
           cSoundEffects.SpeechColor = Game.GetColorFromRGB(252, 84, 252); //make it look like IRene
           cSoundEffects.Say("Everything alright there, professor?");
           player.Say("Yes, Irene, thank you!");
           cabinet.Graphic = 36; //open cabinet
           needBang = false;
        }
      }
    }      
  } else if (player.ActiveInventory == iBarnett_Hammer1 ) { //genuine hammer
    if (DialogsLogic.GetVarBool("eDialog_IndyConfusedHammers") && !DialogsLogic.GetVarBool("eDialog_IndySortedHammers")) {
      player.Say("I'm not using those hammers until I'm sure which one is the fake one.");
    } else {
      player.Say("I'm not using an authentic ceremonial hammer[as a vulgar tool!");
    }
        
  } else {
    player.Say("I don't need to add that to the file cabinet.");
  }
}

// File Cabinet
function hCabinet_AnyClick()
{
  Verbs.AnyClickWalk(219, 117, eDirectionRight);

  Action usedAction = Verbs.GetUsedAction();
  
  switch(usedAction){
    case eGA_Pull:   
    case eGA_Open: 
      hCabinet_Open(); 
      break;
    case eGA_Push:
    case eGA_Close: 
      if (cabinetClose == true) {
        player.Say("It's already closed.");
        cabinetClose = true;
      } else if (cabinetClose == false) {
        aSound5.Play();
        cabinet.Graphic = 37;
        cabinetClose = true;
      }  
      break;
    case eGA_LookAt: 
      if (cabinetClose == true) {
        player.Say("My old file cabinet... So old you could probably call it a relic!");
      } else if (cabinetClose == false) {
        if (telegramTaken == false) {
          player.Say("Here's a telegram from Marcus!");
          player.AddInventory(iTelegram);
          telegramTaken = true;
        } else {
          player.Say("I already got the telegram. There's nothing else of interest in the cabinet.");
        }
      }
      break;
    case eGA_UseInv: 
      hCabinet_UseInv(); 
      break;
    default:
      Verbs.Unhandled(eHeavy);
      break;
  }
}

// Door
function door1_AnyClick()
{  
  Action usedAction = Verbs.GetUsedAction();
  Doors7COG.DefaultReaction_WalkFirst(door1, usedAction);

}

function region1_Standing()
{
  player.ChangeRoom_ThroughDoor(door1); 
}

function oBarnett_Hammer1_AnyClick()
{ 
  //these are not the "walk to" coordinates. These define what point Indy faces
  int x = 140;
  int y =  105;
  
  int walk_x = 135;
  int walk_y =  125;
  
  eObjectType objType = eGizmo;
 
  Action usedAction = Verbs.GetUsedAction();
  switch(usedAction){
    case eGA_LookAt: player.FaceAndSay2(x, y, "It's a genuine ceremonial hammer."); break;
    case eGA_Open: Verbs.AnyClickWalkLook(2, 110, eDirectionLeft, ""); break;
    case eGA_Use:
    case eGA_PickUp: 
      player.Walk(walk_x,  walk_y, eBlock);
      player.FaceAndSay2(x, y,  "I'll take it");
      oBarnett_Hammer1.Visible = false; //we remove the hammer from the room
      player.AddInventory(iBarnett_Hammer1); //we give it to the player
      break;
    case eGA_TalkTo: player.FaceAndSay2(x, y, "It's not hammer time."); break;
    case eGA_UseInv: Verbs.AnyClickWalkLook(2, 110, eDirectionLeft, ""); break;
    default:
      Verbs.Unhandled();
      break;
  }
}

function oBarnett_Hammer2_AnyClick()
{
  
  //these are not the "walk to" coordinates. These define what point Indy faces
  int x = 140;
  int y =  105;
  
  int walk_x = 145;
  int walk_y =  125;
  
  eObjectType objType = eGizmo;
  
  Action usedAction = Verbs.GetUsedAction();
  switch(usedAction){
    case eGA_LookAt: player.FaceAndSay2(x, y, "It's a copy of a ceremonial hammer."); break;
    case eGA_Use:
    case eGA_PickUp:
      player.Walk(walk_x,  walk_y, eBlock);
      player.FaceAndSay2(x, y,  "I'll take it");
      oBarnett_Hammer2.Visible = false; //we remove the hammer from the room
      player.AddInventory(iBarnett_Hammer2); //we give it to the player
      break;
    case eGA_TalkTo: player.FaceAndSay2(x, y, "It's not hammer time."); break;
    default:
      Unhandled_FaceLocation(x, y, objType);
      break;
  }
}

function room_FirstLoad()
{
  PlayerUI.EnableAndShow(); 

  #ifdef TESTING
  if (CheckPoints.IsJumping()) { //we're in debug and we arrived in this room using the "jump to checkpoint" button
     
    CheckPoints.JumpDone();    

    if (CheckPoints.RequestedCheckpoint(eRoom_02_06_IndyOffice, eChckpnt_07_BarnettReadTelegram)) {
      
      player.AddInventory(iTelegram);
      player.AddInventory(iOilCan);
      player.AddInventory(iCompass);
      player.AddInventory(iCompassNote);
      player.AddInventory(iKey);
      hasKey = true;

      DialogsLogic.SetVarBool("eDialog_FoundProperSubject",  true);
      DialogsLogic.SetVarBool("eDialog_LookedAtCompassTag",  true);    
      DialogsLogic.SetVarBool("eDialog_SandyHasExplainedTheProblem",  true);    
      DialogsLogic.SetVarBool("eDialog_ShowedCompassToStudents",  true);    
      DialogsLogic.SetVarBool("eDialog_StudentsPuzzleFullyResolved",  true); 
    }
  }
  #endif
  
}
