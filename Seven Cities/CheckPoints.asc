
int nextCategoryIndex = 0;
CheckpointCategory categories[MAX_CATEGORIES];

bool checkpointInitialized = true; //is false after a "jump to" until all variables have been set in the destination room
int requestedCategory = 0;
int requestedCheckpoint = 0;

// Add a checkpoint category
function AddCategory(String title) 
{
  categories[nextCategoryIndex].title = title;
  categories[nextCategoryIndex].nextCheckpointIndex = 0;
  nextCategoryIndex++;
}

// Add a new checkpoint to the category
//   CheckPointsEnum is optional and corresponding to a specfial event in the room
function CheckpointCategory::AddCheckpoint(String title, RoomsEnum room, CheckPointsEnum checkpoint) 
{
  this.titles[this.nextCheckpointIndex] = title;
  this.rooms[this.nextCheckpointIndex] = room;
  this.checkpoints[this.nextCheckpointIndex] = checkpoint;
  this.nextCheckpointIndex++;
}

// Register all checkpoints by category
static void CheckPoints::RegisterAll() 
 {
    AddCategory("GUI");
    categories[eCheckPointCat_Gui].AddCheckpoint("Title Menu", eRoom_GUI_00_TitleMenu);
    categories[eCheckPointCat_Gui].AddCheckpoint("End Credits", eRoom_GUI_01_EndCredits);
    categories[eCheckPointCat_Gui].AddCheckpoint("Disclamer", eRoom_GUI_02_Disclaimer);
    categories[eCheckPointCat_Gui].AddCheckpoint("CheckPoint Selection", eRoom_GUI_03_CheckPointSelection);
    
    AddCategory("01 TIBET");
    categories[eCheckPointCat_Tibet].AddCheckpoint("01-00 Map Close up", eRoom_01_00_MapCloseUp);
    categories[eCheckPointCat_Tibet].AddCheckpoint("01-01 Tibet-top", eRoom_01_01_TibetTop);
    categories[eCheckPointCat_Tibet].AddCheckpoint("01-02 Ice Cave", eRoom_01_02_IceCave);
    categories[eCheckPointCat_Tibet].AddCheckpoint("01-03 Mountain Bottom", eRoom_01_03_MountainBottom);
    categories[eCheckPointCat_Tibet].AddCheckpoint("01-04 Escape slope & Indiana Jones title", eRoom_01_04_EscapeSlopAndCredits);
    categories[eCheckPointCat_Tibet].AddCheckpoint("01-0.5 Another ice cave", eRoom_01_015_AnotherIceCave);
    
    AddCategory("02 BARNETT");
    categories[eCheckPointCat_Barnett].AddCheckpoint("02-00 Chalkboard (hand)", eRoom_02_00_ChalkboardHand);
    categories[eCheckPointCat_Barnett].AddCheckpoint("02-01 Chalkboard (face)", eRoom_02_01_ChalkBoardFace);
    categories[eCheckPointCat_Barnett].AddCheckpoint("02-02 Indy's classroom (new)", eRoom_02_02_IndyClassRoom_New);
    categories[eCheckPointCat_Barnett].AddCheckpoint("02-02 Indy's classroom - ChalkBoard Cutscene", eRoom_02_02_IndyClassRoom_New, eChckpnt_03_IndysClassroom_chalkboardCutscene);
    categories[eCheckPointCat_Barnett].AddCheckpoint("02-02 Indy's classroom - Students Puzzle 1", eRoom_02_02_IndyClassRoom_New, eChckpnt_04_IndysClassroom_studentsPuzzle);
    categories[eCheckPointCat_Barnett].AddCheckpoint("02-02 Indy's classroom - Students Puzzle 2", eRoom_02_02_IndyClassRoom_New, eChckpnt_05_IndysClassroom_studentsPuzzle2);
    categories[eCheckPointCat_Barnett].AddCheckpoint("02-03 Corridor", eRoom_02_03_BarnettCorridor);
    categories[eCheckPointCat_Barnett].AddCheckpoint("02-04 Mulbray's Classroom", eRoom_02_04_Mulbray);
    categories[eCheckPointCat_Barnett].AddCheckpoint("02-05 Irene's Office", eRoom_02_05_Irene);
    categories[eCheckPointCat_Barnett].AddCheckpoint("02-06 Indy's Office", eRoom_02_06_IndyOffice);
    categories[eCheckPointCat_Barnett].AddCheckpoint("02-06 Indy's Office - Read Telegram", eRoom_02_06_IndyOffice, eChckpnt_07_BarnettReadTelegram);
    categories[eCheckPointCat_Barnett].AddCheckpoint("02-07 Barnett Outside", eRoom_02_07_BarnettOutside);
    categories[eCheckPointCat_Barnett].AddCheckpoint("02-08 Map Room", eRoom_02_08_BarnettTravelMap);
    categories[eCheckPointCat_Barnett].AddCheckpoint("02-09 Telegram Closeup", eRoom_02_09_BarnettTelegram);
    categories[eCheckPointCat_Barnett].AddCheckpoint("OBSOLETE Barnett Hallway", eRoom_02_03OBSOLETE_BarnettCorridor);
    
    AddCategory("03 ARIZONA");
    categories[eCheckPointCat_Arizona].AddCheckpoint("03-00 Outside Hotel", eRoom_03_00_HotelOutside);
    categories[eCheckPointCat_Arizona].AddCheckpoint("03-01 Marcu's Room", eRoom_03_01_MarcusRoom);
    categories[eCheckPointCat_Arizona].AddCheckpoint("03-02 Cave entrance & inside", eRoom_03_02_IndianCave);
    categories[eCheckPointCat_Arizona].AddCheckpoint("03-XX Path", eRoom_03_03_GENERICCanyons);
    
    AddCategory("04 NEW YORK");
    categories[eCheckPointCat_NewYork].AddCheckpoint("04-00 Newspaper", eRoom_04_00_NewsPaper);
    categories[eCheckPointCat_NewYork].AddCheckpoint("04-01 Inside Taxi", eRoom_04_01_InsideTaxi);
    categories[eCheckPointCat_NewYork].AddCheckpoint("04-02 Inside Hotel", eRoom_04_02_InsideHotel);
    categories[eCheckPointCat_NewYork].AddCheckpoint("04-08 Sub Cutscene", eRoom_04_08_SubCutscene);
    
    AddCategory("05 SPAIN");
    categories[eCheckPointCat_Spain].AddCheckpoint("05-01 Country Side", eRoom_05_01_CountrySide);
    categories[eCheckPointCat_Spain].AddCheckpoint("05-02 Nazi Digsite", eRoom_05_02_DigSite);
    categories[eCheckPointCat_Spain].AddCheckpoint("05-03 George's Tent", eRoom_05_03_GeorgeTent);
    categories[eCheckPointCat_Spain].AddCheckpoint("05-04 Officers' Tent", eRoom_05_04_OfficerTent);
    categories[eCheckPointCat_Spain].AddCheckpoint("05-06 Excavation", eRoom_05_06_Excavation);
    
    AddCategory("06 ENGLAND");
    
    AddCategory("07 PARIS");
    categories[eCheckPointCat_Paris].AddCheckpoint("07-01 Paris map", eRoom_07_01_ParisMap);
    categories[eCheckPointCat_Paris].AddCheckpoint("07-02 Convent Yard", eRoom_07_02_ConventYard);
    categories[eCheckPointCat_Paris].AddCheckpoint("07-03a Catacomb water maze shore", eRoom_07_03_GENERIC_Catacombs);
    categories[eCheckPointCat_Paris].AddCheckpoint("07-03b Generic catacombs background (in water)", eRoom_07_03_GENERIC_Catacombs);
    categories[eCheckPointCat_Paris].AddCheckpoint("07-03c Generic Catacombs background (on land)", eRoom_07_03_GENERIC_Catacombs);
    categories[eCheckPointCat_Paris].AddCheckpoint("07-04 Manuscript room", eRoom_07_04_ManuscriptRoom);
    categories[eCheckPointCat_Paris].AddCheckpoint("07-05 Paris cafe+Phone booth", eRoom_07_05_ParisCafe);
    categories[eCheckPointCat_Paris].AddCheckpoint("07-06 Convent inside", eRoom_07_06_ConventInside);
    categories[eCheckPointCat_Paris].AddCheckpoint("07-06b Book Close up", eRoom_07_06b_BookCloseUp);
    categories[eCheckPointCat_Paris].AddCheckpoint("07-07 Church ruins", eRoom_07_07_ChurchRuins);
    categories[eCheckPointCat_Paris].AddCheckpoint("07-08 Catacombs Entrance", eRoom_07_08_CatacombsEntrance);
    
    AddCategory("08");
    
    AddCategory("09 JERUSALEM");
    
    AddCategory("10 GERMANY");
    
    AddCategory("11 OUTSIDE GER");
    
    AddCategory("12 MEXICO");
    
    AddCategory("13a VENE-OUT");
    
    AddCategory("13b VENE-CITY");
    categories[eCheckPointCat_Venezuela_b].AddCheckpoint("13-05 Merchandise Lobby", eRoom_13_05_MerchandiseLobby);
    categories[eCheckPointCat_Venezuela_b].AddCheckpoint("13-06 Jaguar Guardian", eRoom_13_06_JaguarGuardian);
    categories[eCheckPointCat_Venezuela_b].AddCheckpoint("13-07 General view", eRoom_13_07_CityGeneralView);
    categories[eCheckPointCat_Venezuela_b].AddCheckpoint("13-08 Barracks outside", eRoom_13_08_BarracksOutside);
    
    AddCategory("13c VENE-PAL");
    
    AddCategory("14 ENDING");
    
    AddCategory("DEBUG/TESTS");
    categories[eCheckPointCat_DebugTest].AddCheckpoint("GUI Interactions Tests", eRoom_DEBUG_GUIinteractionsTests);
    categories[eCheckPointCat_DebugTest].AddCheckpoint("Scroll Lock Tests", eRoom_DEBUG_ScrollLockTests);
        
    for(int catIndex = 0; catIndex < nextCategoryIndex; catIndex++) { 
      ListBoxCategories.AddItem(String.Format("%s (%d)", categories[catIndex].title, categories[catIndex].nextCheckpointIndex));
    }
    
    for(int checkpointIndex = 0; checkpointIndex < categories[0].nextCheckpointIndex; checkpointIndex++) {
      ListBoxCheckpoints.AddItem(categories[0].titles[checkpointIndex]);
    }
}
static void CheckPoints::PopulateCheckpoints(ListBox* LbCheckpoints, int categoryIndex)
{
    LbCheckpoints.Clear();
    for(int checkpointIndex = 0; checkpointIndex < categories[categoryIndex].nextCheckpointIndex; checkpointIndex++) {
        LbCheckpoints.AddItem(categories[categoryIndex].titles[checkpointIndex]);
    }
}

static void CheckPoints::PopulateControls(ListBox* LbCategories,  ListBox* LbCheckpoints) 
{
    LbCategories.Clear();
    for(int catIndex = 0; catIndex < nextCategoryIndex; catIndex++) { 
      LbCategories.AddItem(String.Format("%s (%d)", categories[catIndex].title, categories[catIndex].nextCheckpointIndex));
      //Display("%d : %s", catIndex, categories[catIndex].name);
    }

    CheckPoints.PopulateCheckpoints(LbCheckpoints,  0); //By default we display the checkpoints of category 0
}
 

static void CheckPoints::JumpDone() {
  checkpointInitialized = true;  
  
  player.PlaceOnWalkableArea();  
}

static bool CheckPoints::IsJumping() {
  return !checkpointInitialized;
}

// Method used to verify the requested checkpoint is valid
//   Because we use RoomsEnum and CheckPointsEnum 
//   we have to both array and check requested category/checkpoint
static bool CheckPoints::RequestedCheckpoint(RoomsEnum room, CheckPointsEnum checkpoint) {
  for(int catIndex = 0; catIndex < nextCategoryIndex; catIndex++) { 
    for(int checkpointIndex = 0; checkpointIndex < categories[catIndex].nextCheckpointIndex; checkpointIndex++) {
      if(categories[catIndex].rooms[checkpointIndex] == room) {
        if(requestedCategory == catIndex && requestedCheckpoint == checkpointIndex) {
          if(checkpoint != eChckpnt_00_Default) {
            //Display("checkpoint != eChckpnt_00_Default");
            return checkpoint == categories[catIndex].checkpoints[checkpointIndex];
          }
          return true;
        }
      }
    }
  }
  return false;
}


/*********************************************************************
*
*   With JumpTo*** methods we can add 
*   additionnals code for some checkpoints
*   but the good way is to add this code 
*   in each specific room with RequestedCheckpoint method
*   (shown in BARNETT indy's classroom / room16 room_FirstLoad method)
*
***********************************************************************/

void JumpToGui(CheckPointsEnum checkpoint, RoomsEnum room) {
  switch(checkpoint) {
    default: player.ChangeRoom(room); break;
  }
}

void JumpToTibet(CheckPointsEnum checkpoint, RoomsEnum room) {
  switch(checkpoint) {
    default:player.ChangeRoom(room); break;
  }
}

void JumpToBarnett(CheckPointsEnum checkpoint, RoomsEnum room) {
  switch(checkpoint) {
    default:player.ChangeRoom(room); break;
  }
}

void JumpToArizona(CheckPointsEnum checkpoint, RoomsEnum room) {
  switch(checkpoint) {
    default:player.ChangeRoom(room); break;
  }
}

void JumpToNewYork(CheckPointsEnum checkpoint, RoomsEnum room) {
  switch(checkpoint) {
    default:player.ChangeRoom(room); break;
  }
}

void JumpToSpain(CheckPointsEnum checkpoint, RoomsEnum room) {
  switch(checkpoint) {
    default:player.ChangeRoom(room); break;
  }
}

void JumpToEngland(CheckPointsEnum checkpoint, RoomsEnum room) {
  switch(checkpoint) {
    default:player.ChangeRoom(room); break;
  }
}

void JumpToParis(CheckPointsEnum checkpoint, RoomsEnum room) {
  switch(checkpoint) {
    default:player.ChangeRoom(room); break;
  }
}

void JumpToJerusalem(CheckPointsEnum checkpoint, RoomsEnum room) {
  switch(checkpoint) {
    default:player.ChangeRoom(room); break;
  }
}

void JumpToGermanyNaziBase(CheckPointsEnum checkpoint, RoomsEnum room) {
  switch(checkpoint) {
    default:player.ChangeRoom(room); break;
  }
}

void JumpToGermanyOutside(CheckPointsEnum checkpoint, RoomsEnum room) {
  switch(checkpoint) {
    default:player.ChangeRoom(room); break;
  }
}

void JumpToMexico(CheckPointsEnum checkpoint, RoomsEnum room) {
  switch(checkpoint) {
    default:player.ChangeRoom(room); break;
  }
}

void JumpToVenezuela(CheckPointsEnum checkpoint, RoomsEnum room) {
  switch(checkpoint) {
    default:player.ChangeRoom(room); break;
  }
}

void JumpToEnding(CheckPointsEnum checkpoint, RoomsEnum room) {
  switch(checkpoint) {
    default:player.ChangeRoom(room); break;
  }
}

void JumpToDebugAndTest(CheckPointsEnum checkpoint, RoomsEnum room) {
  switch(checkpoint) {
    default:player.ChangeRoom(room); break;
  }
}

static void CheckPoints::JumpTo(int categoryIndex, int checkpointIndex) {
  checkpointInitialized = false;
  
  requestedCategory = categoryIndex;
  requestedCheckpoint = checkpointIndex;
  
  RoomsEnum room = categories[requestedCategory].rooms[requestedCheckpoint];
  CheckPointsEnum checkpoint = categories[requestedCategory].checkpoints[requestedCheckpoint];
  
  //Display("requestedCategory: %d, requestedCheckpoint: %d, room :%d.", requestedCategory, requestedCheckpoint, room);
  
  switch(requestedCategory)
  {
    case eCheckPointCat_Gui:
      JumpToGui(checkpoint, room);
      break;
    case eCheckPointCat_Tibet:
      JumpToTibet(checkpoint, room);
      break;
    case eCheckPointCat_Barnett:
      JumpToBarnett(checkpoint, room);
      break;
    case eCheckPointCat_Arizona:
      JumpToArizona(checkpoint, room);
      break;
    case eCheckPointCat_NewYork:
      JumpToNewYork(checkpoint, room);
      break;
    case eCheckPointCat_Spain:
      JumpToSpain(checkpoint, room);
      break;
    case eCheckPointCat_England:
      JumpToEngland(checkpoint, room);
      break;
    case eCheckPointCat_Paris:
      JumpToParis(checkpoint, room);
      break;
    case eCheckPointCat_Jerusalem:
      JumpToJerusalem(checkpoint, room);
      break;
    case eCheckPointCat_GermanyNazyBase:
      JumpToGermanyNaziBase(checkpoint, room);
      break;
    case eCheckPointCat_GermanyOutside:
      JumpToGermanyOutside(checkpoint, room);
      break;
    case eCheckPointCat_Mexico:
      JumpToMexico(checkpoint, room);
      break;
    case eCheckPointCat_Venezuela_a:
      JumpToVenezuela(checkpoint, room);
      break;
    case eCheckPointCat_Ending:
      JumpToEnding(checkpoint, room);
    case eCheckPointCat_DebugTest:
      JumpToDebugAndTest(checkpoint, room);
      break;
    default: 
      Display(String.Format("Programing mistake: you forgot to implement checkpoint '%d'.",checkpointIndex));
      break;
  }
  
  
  player.PlaceOnWalkableArea();
  
}
