// room script file
bool trunkClosed = true; // the trunk is closed
bool tireUsed = false; // the tire has been used on the car
bool canLeave = false; // Has permission to leave Barnett (use car)
bool enterFirst = false; // First time Indy enters Barnett Outside
bool frontDoorClose = false; // the front door is closed

int falling_leaf_count = 0; //when this reaches a certain number, we play the "falling leaf" animation

void WalkToTrunk()
{
  player.Walk(oIndyCar.X-5, oIndyCar.Y-5, eBlock);
  player.FaceDirection(eRight);
}

void WalkToCar()
{
  player.Walk(oIndyCar.X+10, oIndyCar.Y-10, eBlock);
  player.FaceDirection(eDown);
}

function UpdateCarGraphics() {

  if (trunkClosed) {
    oCarTrunk.Graphic = 944;
  } else {
    oCarTrunk.Graphic = 945;
  }
  
  if (tireUsed) {
    oIndyCar.Graphic = 947; //the car with the tyre OK
  } else {
    oIndyCar.Graphic = 946; //the car with the flat tyre
  }
  
  if (!player.HasInventory(iTireRepair)) {
    if (!trunkClosed) {
      oSpareTire.Visible = true;
    } else {
      oSpareTire.Visible = false; //we hide it when the trunk is closed, just to avoid baseline issues
    }
  } else {
    oSpareTire.Visible = false;
  }
  
}

function room_Load()
{
  aMusic4.Play();

  Doors7COG.OnEnterRoom(); //this function must be called in EVERY ROOM that contains a door
  
  //make the car's smoke invisible
  oCarSmoke.SetView(EMPTY_VIEW);
  
  oFallingLEaf.Visible = false;
  
  UpdateCarGraphics();
}

function room_AfterFadeIn()
{
  if ( !DialogsLogic.GetVarBool("eDialog_BulliesHaveSlashedTire")) {
    StartCutscene(eSkipESCOnly);
    cBiff.Say("I think that this will teach old Doctor Jones a lesson not to mess with us!");
    cBiff.Say("He won't be going anywhere for awhile with a slashed tire, will he, Bruno?");
    cBruno.Say("Haw haw haw!");
    EndCutscene();
    DialogsLogic.SetVarBool("eDialog_BulliesHaveSlashedTire", true);
    enterFirst = true;
    cBiff.ChangeRoom(18, 7, 7); //18 = "death room"
    cBruno.ChangeRoom(18, 7, 8); //18 = "death room"
    player.ChangeRoom(prevRoom1, prevX, prevY);    
    PlayerUI.Show();
  }
  
  if (DialogsLogic.GetVarBool("eDialog_hasReadTelegram") && player.PreviousRoom == eRoom_02_03_BarnettCorridor && enterFirst == true) {
    WalkToTrunk();
    player.Say("Just, great... It looks like someone slashed my tire!");
    enterFirst = false;
  }
  
  falling_leaf_count=0;
  
  //DialogsLogic.SetVarBool("eDialog_BulliesHaveSlashedTire",  1);  //DEBUG!
   
}

function room_FirstLoad()
{
  PlayerUI.EnableAndShow(); 
  
  #ifdef TESTING
  if (CheckPoints.IsJumping()) { //we're in debug and we arrived in this room using the "jump to checkpoint" button
     
    CheckPoints.JumpDone();
    
    if (CheckPoints.RequestedCheckpoint(eRoom_02_07_BarnettOutside)) {
      player.AddInventory(iOilCan);
      player.AddInventory(iCompass);
      player.AddInventory(iCompassNote);
      player.AddInventory(iTelegram);
      Mouse.Mode = eModeWalkto;
      PlayerUI.EnableAndShow(); 
      DialogsLogic.SetVarBool("eDialog_FoundProperSubject",  true);
      DialogsLogic.SetVarBool("eDialog_LookedAtCompassTag",  true);    
      DialogsLogic.SetVarBool("eDialog_SandyHasExplainedTheProblem",  true);    
      DialogsLogic.SetVarBool("eDialog_ShowedCompassToStudents",  true);    
      DialogsLogic.SetVarBool("eDialog_StudentsPuzzleFullyResolved",  true); 
      DialogsLogic.SetVarBool("eDialog_hasReadTelegram",  true); 
      DialogsLogic.SetVarBool("eDialog_BulliesHaveSlashedTire",  true);    
    }
  }
  #endif
}

function frontDoors_AnyClick()
{  
  Action usedAction = Verbs.GetUsedAction();
  Doors7COG.DefaultReaction_WalkFirst(frontDoors, usedAction);
}

function indyCar_AnyClick()
{   
  Action usedAction = Verbs.GetUsedAction();
  
  if (usedAction != eGA_LookAt)
    WalkToCar();
  
  player.FaceDirection(eDown);
  
  switch(usedAction){
    case eGA_Open:
    case eGA_Use: 
      if (canLeave == true) {
        
        if (!trunkClosed) {
          player.Say("I better close the trunk first...");
          WalkToTrunk();
          trunkClosed = true;
          UpdateCarGraphics();
          WalkToCar();
        }
        
        PlayerUI.Hide();
        player.Say("Arizona, here I come!");
        player.Transparency = 100;
        oCarTrunk.Visible = false;
        oSpareTire.Visible = false;
        WAIT_10
        aSound6.Play();
        WAIT_60
        oCarSmoke.SetView(SMOKE); //play the little smoke animation from the exhaust pipe
        oCarSmoke.Animate(0, 5,  eOnce,  eBlock,  eForwards);
        
        oIndyCar.TweenPosition(2.0, 318,  123, eEaseInTween, eBlockTween);
        //oIndyCar.TweenSize(......); //unfortunaltely the tween module does not allow scalingof objects yet

        mapRef = 1;
        player.ChangeRoom(eRoom_02_08_BarnettTravelMap, 1, 1);
      } else {
        player.Say("I can't leave now, the tire is flat!");
      }    
      break;
    case eGA_LookAt: 
      if (!tireUsed)
        player.Say("What a mess. Surely those bullies!");
      else
        player.Say("All fixed up.");
      break;    
    case eGA_Pull:
    case eGA_Push: 
      if (!tireUsed)
        player.Say("Pushing it won't help with a flat tire.");
      else
        player.Say("Driving it ought to be enough.");    
      break;
    case eGA_Close: player.Say("It's already closed."); break;
    case eGA_UseInv: 
      if (player.ActiveInventory == iTireRepair && tireUsed == false) {
        player.Say("Maybe if I use this with the flat tire...");        
        FadeOut(5);
        player.LoseInventory(iTireRepair);
        tireUsed = true;
        UpdateCarGraphics();
        WAIT_50
        FadeIn(5);        
        canLeave = true;
        GiveScore(1);
        WAIT_50
        player.Say("Now that's what I call some good work.");
        player.Say("And I'm not even dirty.");
      } else {
        player.Say("There's no point to that...");
      }
      break;
    default:
      Verbs.Unhandled(eHeavy); //generic response for heavy object
      break;
  }  
}

function carTrunk_Action(bool closeTrunck)
{
  if (closeTrunck == trunkClosed) 
  {
    player.Say("It's already closed.");  
    return;
  }
      
  if (!closeTrunck == trunkClosed) 
  {
    player.Say("It's already open.");
    return;
  }
    
  trunkClosed = closeTrunck;  
  UpdateCarGraphics();
}

function carTrunk_AnyClick()
{
  WalkToTrunk();  
  
  Action usedAction = Verbs.GetUsedAction();
  switch(usedAction){
    case eGA_LookAt: player.Say("It's not very large but it's useful when I travel."); break;    
    case eGA_Use: 
      carTrunk_Action(!trunkClosed); 
      break;    
    case eGA_Pull:
    case eGA_Open: 
      carTrunk_Action(false);
      break;      
    case eGA_Push:
    case eGA_Close: 
      carTrunk_Action(true);
      break;      
    default:
      Verbs.Unhandled(eGizmo);
      break;
  }
}

function spareTire_AnyClick()
{  
  WalkToTrunk();
  
  Action usedAction = Verbs.GetUsedAction();
  switch(usedAction){
    case eGA_LookAt: player.Say("It's a tire repair kit."); break;
    case eGA_Use:  player.Say("That's not going to improve anything."); break;
    case eGA_PickUp: 
      player.Say("Yeah, that might come handy.");
      player.AddInventory(iTireRepair);
      WAIT_1
      UpdateCarGraphics();
    break;
    default:
      Verbs.Unhandled(eGizmo);
      break;
  }
}

function room_LeaveLeft()
{
  player.Say("I'm not walking to the airport, it's tens of miles away!");
  player.Walk(90, 131, eBlock);
}

function region4_WalksOnto()
{
  player.Say("I'm not walking to the airport, it's tens of miles away!");
  player.Walk(212, 112, eBlock);
}

function region1_Standing()
{
  player.ChangeRoom_ThroughDoor(frontDoors);
}

function room_RepExec()
{
  if (!oFallingLEaf.Animating)
    oFallingLEaf.Visible = false;
    
  falling_leaf_count++;
  if (falling_leaf_count >= 3000) {
    
     //we make it fall from any X between those two:
     int x1= 175; int x2 = 215;
     oFallingLEaf.X= x1+Random(x2-x1);
     
     oFallingLEaf.Transparency = 20; //just because.
     oFallingLEaf.Visible = true;
     oFallingLEaf.SetView(FALLING_LEAF);
     oFallingLEaf.Animate(0, 1, eOnce, eNoBlock, eForwards);
     falling_leaf_count=0;
  }
}
