// room script file
int billboardRotation = 1; // billboard rotation
//bool indyDoorClose = true; // The door is closed




function removeAllStudents() {
  // Room 11 used as "death room", to send characters we don't want in current room anymore, but not necessarily remove them from the game
  cStudent01.ChangeRoom(18, 1, 1); 
  cStudent02.ChangeRoom(18, 1, 1); 
  cStudent05.ChangeRoom(18, 1, 1); 
  cStudent06.ChangeRoom(18, 1, 1); 
  cStudent07.ChangeRoom(18, 1, 1); 
}


function animateAllStudents() {
  cStudent01.SetIdleView(STUDENT1, 0); 
  cStudent02.SetIdleView(STUDENT2_IDLE, 5); 
  cStudent05.SetIdleView(STUDENT5_IDLE, 7); 
  cStudent06.SetIdleView(STUDENT6_IDLE, 3); 
  cStudent07.SetIdleView(STUDENT7_IDLE, 4);
}






function cutscene_beforeStudentsPuzzle() {
  StartCutscene(eSkipESCOnly);
    //if (CheckPoints.ShouldSkipCutscene_Consume())
    //  on_key_press();
    //cStudents.Animate(0, 15, eRepeat, eNoBlock);
    cStudent02.ChangeView(STUDENT2_WRITE); //make that student take notes ;)

    CharactersLogic.setIndyView_suit();//set Indy's view to Indy_suit
    
    
    player.LockView(INDY_GLASSES); //play the little animation showing Indy taking off his glasses
    player.Animate(0, 2, eOnce, eBlock);
    player.UnlockView();
    //player.FaceCharacter(cStudents, eBlock);
    player.FaceDirection(eLeft);
    player.Say("In discovering his past, man can discover his future...");
    player.Walk(141, 115, eBlock);
    //player.FaceCharacter(cStudents, eBlock);
    player.FaceDirection(eLeft);
    player.Say("Maybe the next great moment in man's history will be his discovery of some long lost secret of the past...");
    aSound1.Play();
    WAIT_160

    //cStudents.ChangeRoom(18, 1, 1); // Room 11 used as "death room", to send characters we don't want in current room anymore, but not necessarily remove them from the game

    cStudent02.ChangeView(STUDENT2_WALK); //make her stop writing
  
  
  EndCutscene();
  
  //the bit we never skip
  player.Say("OK, then... Read chapters 21 and 22 for next week. You are dismissed.");
  CharactersLogic.Students_SpeakFast("Professor!", "Wait!", "The essay!", "We need to know!");
  player.Say("I'm sorry, what? Not all at the same time, please!");
  CharactersLogic.Students_SpeakFast("The final essay!", "The holidays are coming!", "The subject!", "You promised!");  
  player.Say("Oh, it's about that final essay again, is it?");
  
}

function cutscene_afterStudentsPuzzle() {
  
  StartCutscene(eSkipESCOnly);
    
    Overlay* momentsLaterCut = Overlay.CreateGraphical(0, 0, 2, false);
    removeAllStudents(); //move all students to the exit
    WAIT_120
    momentsLaterCut.Remove();
    player.Say("At last.");
    player.Walk(184, 137, eBlock);
    player.FaceLocation(210, 196, eBlock);
    
    player.Say("It's good to be back here at Barnett College. My last trip to the Orient wasn't very restful.");
    player.FaceLocation(4, 129, eBlock);
    WAIT_50
    player.FaceLocation(315, 130, eBlock);
    WAIT_50
    player.FaceLocation(210, 196, eBlock);


  EndCutscene();
  
  player.Say("I wonder where Marcus is? I haven't seen him since I've gotten back... I better find out where he is.");

}
bool puzzleSolvedYet = false;

//This is a utility function used to set up the game for all checkpoints AFTER solving the students puzzle
function After_IndyClassCutscene() {
    //WARNING: the instructions in this function must leave the game
    //EXACTLY as it would be after the cutscene.
    DialogsLogic.SetVarBool("eDialog_FoundProperSubject",  true);
    DialogsLogic.SetVarBool("eDialog_LookedAtCompassTag",  true);    
    DialogsLogic.SetVarBool("eDialog_SandyHasExplainedTheProblem",  true);    
    DialogsLogic.SetVarBool("eDialog_ShowedCompassToStudents",  true);    
    DialogsLogic.SetVarBool("eDialog_StudentsPuzzleFullyResolved",  true); 
    
    removeAllStudents();
    puzzleSolvedYet = true;
    
    player.ChangeView(1);
    player.SpeechView = 3;
    //cStudents.ChangeRoom(18, 1, 1);
    player.x = 184;
    player.y = 137;
    player.FaceLocation(210, 196, eBlock);

    player.Say("I should find Marcus.");

}

/*
function disableDialogOptions() {
  //dStudent2.SetOptionState(2, eOptionOff); //At first, the short explanation is not available
  //dStudent2.SetOptionState(3, eOptionOff); //Indy cannot suggest solutions about the essay before Sandy tells him why they're angry
  //dStudent2.SetOptionState(4, eOptionOff); //Indy cannot suggest solutions about the essay before Sandy tells him why they're angry
}
*/


function room_RepExec()
{
  //We need to intercept the solving of the students puzzle here, because it gets triggered in a dialog
  if (!puzzleSolvedYet) //we use an extra boolean to avoid triggering the cutscene repeatedly
  {
    if (DialogsLogic.GetVarBool("eDialog_StudentsPuzzleFullyResolved"))
    {
      puzzleSolvedYet = true;
      cutscene_afterStudentsPuzzle();

    }
  }
  
}


function room_FirstLoad()
{
  animateAllStudents();

  #ifdef TESTING
  if (CheckPoints.IsJumping()) { //we're in debug and we arrived in this room using the "jump to checkpoint" button
     
    CheckPoints.JumpDone(); //never forget to tell the engine we're done jumping.
                            //we do it immediately in case a cutscene would contain a 'ChangeRoom', thus calling 'isJumping' again
    
    After_IndyClassCutscene();


  } else {
    cutscene_beforeStudentsPuzzle(); //in case we arrived straight from another checkpoint in a different room
  }
  #endif
  
  #ifndef TESTING
  cutscene_beforeStudentsPuzzle();
  #endif
  /*
  
  if (player.PreviousRoom == 11)//do we come from the chalkboard (did we play the opening cutscene?)
    Before_IndyClassCutscene();
  else //we didn't play the opening cutscene. we also skip that one
    After_IndyClassCutscene();
    */
    
    
  //disableDialogOptions();
  
  
  Mouse.Mode = eModeWalkto;
  PlayerUI.EnableAndShow(); //We're now out of a cutscene where the whole interface was hidden
  /*
  gIconbar.Visible = true;
  gInventory.Visible = true;
  gStatusline.Visible = true;
  */

}

function room_Load()
{
  aMusic1.Play();
    
  Doors7COG.OnEnterRoom(); //this function must be called in EVERY ROOM that contains a door
  
  //ListBoxConsole.AddItem(String.Format("Area %d is currently %d",2, GetWalkableAreaAt(146, 104))); //DEBUG
  
  //go back to "indy in suit" regular views
  player.ChangeView(1);
  player.SpeechView = 3;  
}

// Hotspots




// ///////////////////////////////////
//    chalkboard1
//////////////////////////////////////






function hchalkboard1_AnyClick()
{
  
  
  /*
  if (game.used_mode == eModePull) {
    player.FaceAndSay2(xChalkboard, yChalkboard, "It's attached firmly to the wall.");
  }
  if (game.used_mode == eModePush) {
    player.FaceAndSay2(xChalkboard, yChalkboard, "It's attached firmly to the wall.");
  }
  if (game.used_mode == eModeGive) {
    player.FaceAndSay2(xChalkboard, yChalkboard, "Why on Earth would I do that? It's as if some other being is possessing me to think about doing all these strange things...");
  }
  */
  
  //these are not the "walk to" coordinates. These define what point Indy faces
  int x = 253;
  int y =  91;
  eObjectType objType = eHeavy;
  
  if (game.used_mode == eModeLookat) {
    player.FaceAndSay2(x, y, "I should probably put in a word for a new one.");
  } else if (game.used_mode == eModeTalkto) {
    player.FaceAndSay2(x, y, "I have better things to do than rehearsing my course.");
  } else if (game.used_mode == eModeOpen) {
    player.FaceAndSay2(x, y, "This isn't some secret passage leading to a crazed genius who creates evil mutant tentacles.");
    WAIT_50
    player.FaceDirection(eDown);
    player.Say("I read that in 'Detective Illustrated' at the barber's.");
    player.FaceDirection(eRight);
  } else if (game.used_mode == eModeInteract) {
    player.FaceAndSay2(x, y, "I'm done for today.");
  }  else if (game.used_mode == eModeGive){
    //DO NOTHING. We don't "give" objects to other objects.
  }  else { //every other interaction
    Unhandled_FaceLocation(x, y, objType);
  }
}


/*
function hchalkboard1_Look()
{
  player.FaceAndSay2(xChalkboard, yChalkboard, "I should probably put in a word for a new one.");
}

function hchalkboard1_UseInv()
{
  player.FaceAndSay2(xChalkboard, yChalkboard, "I don't think the chalkboard will work with that.");
}

function hchalkboard1_Talk()
{
  player.FaceAndSay2(xChalkboard, yChalkboard, "I have better things to do than talk to inanimate objects.");
}

function hchalkboard1_Mode8()
{
  player.FaceAndSay2(xChalkboard, yChalkboard, "This isn't some secret passage leading to a crazed genius who creates evil mutant tentacles.");
}

function hchalkboard1_Mode9()
{
  player.FaceAndSay2(xChalkboard, yChalkboard, "This isn't some secret passage leading to a crazed genius who creates evil mutant tentacles.");
}

function hchalkboard1_Interact()
{
  player.FaceAndSay2(xChalkboard, yChalkboard, "I'm not in the mood.");
}

function hchalkboard1_PickUp()
{
  player.FaceAndSay2(xChalkboard, yChalkboard, "Why would I want to carry around a chalkboard?");
}
*/








////////////////////////////////
// Indy's Desk
////////////////////////////////

bool tagTaken = false;
bool deskOpen = false;

int xDesk = 190;
int yDesk = 115;

function hIndysDesk_AnyClick()
{
  /*
  if (game.used_mode == eModePull) {
    player.FaceAndSay2(xDesk, yDesk, "I don't want to pull that.");
  }
  if (game.used_mode == eModePush) {
    player.FaceAndSay2(xDesk, yDesk, "As much fun as it would be to push the desk and give myself a back spasm, I think I'll pass.");
  }
  if (game.used_mode == eModeGive) {
    player.FaceAndSay2(xDesk, yDesk, "I can't give to that.");
  }
  */
  
  //these are not the "walk to" coordinates. These define what point Indy faces
  int x = 190;
  int y =  116;
  eObjectType objType = eHeavy;
  
  if (game.used_mode == eModeLookat) {
    if (!tagTaken) {
      player.FaceAndSay2(x, y, "It's flat, and it has drawers. It's a desk.");
    }else {
      player.Walk(hIndysDesk.WalkToX,  hIndysDesk.WalkToY,  eBlock);
      player.FaceAndSay(eLeft,  "I don't think there is anything else in it.");   
    }
  } else if (game.used_mode == eModeOpen) {
    if (deskOpen) {
      player.Say("It's already open.");
    } else {
      player.Walk(hIndysDesk.WalkToX,  hIndysDesk.WalkToY,  eBlock);
      player.FaceAndSay(eLeft,  "I don't think there is anything in that drawer that can help.");
      WAIT_40
      player.Say("Wait! There is a small tag. I don't recall putting it in here.");
      player.Say("I'll take it.");
      player.AddInventory(iCompassNote);
      deskOpen = true;
      tagTaken = true;
    }
  }  else if (game.used_mode == eModeClose){
    if (deskOpen) {
      player.Say("I have more urgent matters to attend to, right now.");
    } else {
      player.Walk(hIndysDesk.WalkToX,  hIndysDesk.WalkToY,  eBlock);
      player.FaceAndSay(eLeft,  "It's already closed.");      
    }
  }  else if (game.used_mode == eModeGive){
    //DO NOTHING. We don't "give" objects to other objects.
  }  else { //every other interaction
    Unhandled_FaceLocation(x, y, objType);
  }
  
}

/*
function hIndysDesk_Mode9()
{
    player.FaceAndSay2(xDesk, yDesk, "The desk's drawer has been stuck for years...");
}

function hIndysDesk_Interact()
{
    player.FaceAndSay2(xDesk, yDesk, "That just won't work.");
}

function hIndysDesk_Look()
{
    player.FaceAndSay2(xDesk, yDesk, "It's a desk.");
}

function hIndysDesk_Mode8()
{
    player.FaceAndSay2(xDesk, yDesk, "The desk's drawer has been stuck for years...");
}

function hIndysDesk_PickUp()
{
    player.FaceAndSay2(xDesk, yDesk, "It's too heavy to lift.");
}

function hIndysDesk_Talk()
{
    player.FaceAndSay2(xDesk, yDesk, "Hello?");
}

function hIndysDesk_UseInv()
{
    player.FaceAndSay2(xDesk, yDesk, "I have a feeling that won't work.");
}

*/








/////////////////////////////////////////////
// Billboard
/////////////////////////////////////////////


int xBill =64;
int yBill =52;

function hBillboard_AnyClick()
{
  // Pull
  if (game.used_mode == eModePull) {
    player.FaceAndSay2(xBill, yBill, "I don't want to pull that.");
  }
  // Push
  if (game.used_mode == eModePush) {
    player.FaceAndSay2(xBill, yBill, "That wouldn't work.");
  }
  // Give
  if (game.used_mode == eModeGive) {
    player.FaceAndSay2(xBill, yBill, "I have nothing to add to the billboard.");
  }
}

// Open
function hBillboard_Mode8()
{
    player.FaceAndSay2(xBill, yBill, "It can't be opened.");
}

// Close
function hBillboard_Mode9()
{
    player.FaceAndSay2(xBill, yBill, "It can't be closed.");
}

// Use
function hBillboard_Interact()
{
    player.FaceAndSay2(xBill, yBill, "I have nothing to add to the billboard.");
}

// Look
function hBillboard_Look()
{
  player.FaceLocation(xBill, yBill, eBlock);
  bool wcheck1 = true;
  while (wcheck1 == true) {
    if (billboardRotation == 0) {
      player.Say("It's a billboard.");
    } else if (billboardRotation == 1) {
      player.Say("FOR SALE: 1938 Packard. Call Frank.");
    } else if (billboardRotation == 2) {
      player.Say("Debate this Monday Night - The Holy Grail: Myth or Reality?");
      WAIT_30
      player.Say("I think I know the answer to that question...");
    } else if (billboardRotation == 3) {
      player.Say("This space is for rent. Contact R. Derocher.");
    } else if (billboardRotation == 4) {
      player.Say("WANTED: Gas for a chainsaw. Call Dave.");
    } else if (billboardRotation == 5) {
      player.Say("Vote Gracie Allen for President.");
    } else if (billboardRotation == 6) {
      player.Say("Meeting of Barnett Shakespeare Society this Tuesday in the auditorium.");
    } else if (billboardRotation == 7) {
      player.Say("FOR SALE: Collection of Buck Rogers comic books. Call Earl.");
    } else if (billboardRotation == 8) {
      player.Say("WANTED: Lab Assistant. Good pay. No questions asked. Call Doctor Fred.");
    } else if (billboardRotation == 9) {
      player.Say("Movie Saturday night: Robin Hood starring Errol Flynn.");
    }
    
    billboardRotation++; if (billboardRotation >= 9) { billboardRotation = 1;}
    wcheck1 = false;
  }
  
}

// Pickup
function hBillboard_PickUp()
{
    player.FaceAndSay2(xBill, yBill, "It's too heavy to lift.");
}

// Talk
function hBillboard_Talk()
{
    player.FaceAndSay2(xBill, yBill, "A billboard that talks? Now that's a novel concept.");
}

// Use Inventory
function hBillboard_UseInv()
{
  //if (useActive == 5) {
  //  player.FaceAndSay2(xBill, yBill, "My wallet wouldn't work with that.");
  //} else {
    player.FaceAndSay2(xBill, yBill, "I have a feeling that won't work.");
  //}
}

// Objects








////////////////////////////////////////////
// Door1
////////////////////////////////////////////


function door1_AnyClick()
{
  
  Doors7COG.DefaultReaction_WalkFirst(door1,  game.used_mode);
  
}


function hBackOfRoom_WalkOn()
{
  player.FaceLocation(0, 100, eBlock);
  player.Say("Let's see if there is anything interesting back there."); 
  player.Walk(-50,  player.y, eBlock,  eAnywhere); //walk off screen
  WAIT_80
  player.Walk(30,  player.y, eBlock,  eAnywhere);  //come back into screen
  player.Say("Nope. What did I expect to find in an empty classroom?");   
}


function region1_Standing()
{
    player.ChangeRoom_ThroughDoor(door1);

}

function room_AfterFadeIn()
{
  
}



//the region that forbids Indy from sneaking out of the room while the students are still angry
function region2_WalksOnto()
{

  if (!DialogsLogic.GetVarBool("eDialog_StudentsPuzzleFullyResolved")) {
    //make the students complain fast
    CharactersLogic.Students_SpeakFast( "Professor!",
                                        "Where are you going?",
                                        "Are you even listening to us?",
                                        "We need an answer!");
    
    //we temporarily make Indy walk faster
    int speedX = player.WalkSpeedX; //we save the original speed
    int speedY = player.WalkSpeedY;  
    player.StopMoving();
    player.SetWalkSpeed(player.WalkSpeedX*2, player.WalkSpeedY*2);
    player.Walk(154,  137,  eBlock);
    player.StopMoving();
    player.SetWalkSpeed(speedX, speedY);//we restore the original speed


    player.FaceDirection(eLeft);
    player.Say("Yes, yes, of course I'm listening. I'm not leaving before we find a solution together.");
  }

}


//////////////////////////////////////////////////////////////


int xCompassWalk=220;
int yCompassWalk=130;

function CompassDescribe() {
    player.Say("Someone left that artifact on my desk before the class.");
    player.Say("Probably Irene, my secretary.");
    player.Say("I suppose a colleague of mine thought it would be of interest for me.");
}

function oCompass_AnyClick()
{
  
  int mode = game.used_mode;
  
  if        (mode == eModeLookat) {
    player.FaceLocation(oCompass.X,  oCompass.Y,  eBlock);
    CompassDescribe();
    
  } else if (mode == eModePickup) {  
    player.Walk(xCompassWalk,  yCompassWalk,  eBlock);
    player.FaceLocation(oCompass.X,  oCompass.Y,  eBlock);
    CompassDescribe();
    oCompass.Visible = false;
    player.AddInventory(iCompass);
  } else {
    Verbs.Unhandled();
  }  
}
